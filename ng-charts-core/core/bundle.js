(()=>{"use strict";var e={2872:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.interval=t.iif=t.generate=t.fromEventPattern=t.fromEvent=t.from=t.forkJoin=t.empty=t.defer=t.connectable=t.concat=t.combineLatest=t.bindNodeCallback=t.bindCallback=t.UnsubscriptionError=t.TimeoutError=t.SequenceError=t.ObjectUnsubscribedError=t.NotFoundError=t.EmptyError=t.ArgumentOutOfRangeError=t.firstValueFrom=t.lastValueFrom=t.isObservable=t.identity=t.noop=t.pipe=t.NotificationKind=t.Notification=t.Subscriber=t.Subscription=t.Scheduler=t.VirtualAction=t.VirtualTimeScheduler=t.animationFrameScheduler=t.animationFrame=t.queueScheduler=t.queue=t.asyncScheduler=t.async=t.asapScheduler=t.asap=t.AsyncSubject=t.ReplaySubject=t.BehaviorSubject=t.Subject=t.animationFrames=t.observable=t.ConnectableObservable=t.Observable=void 0,t.filter=t.expand=t.exhaustMap=t.exhaustAll=t.exhaust=t.every=t.endWith=t.elementAt=t.distinctUntilKeyChanged=t.distinctUntilChanged=t.distinct=t.dematerialize=t.delayWhen=t.delay=t.defaultIfEmpty=t.debounceTime=t.debounce=t.count=t.connect=t.concatWith=t.concatMapTo=t.concatMap=t.concatAll=t.combineLatestWith=t.combineLatestAll=t.combineAll=t.catchError=t.bufferWhen=t.bufferToggle=t.bufferTime=t.bufferCount=t.buffer=t.auditTime=t.audit=t.config=t.NEVER=t.EMPTY=t.scheduled=t.zip=t.using=t.timer=t.throwError=t.range=t.race=t.partition=t.pairs=t.onErrorResumeNext=t.of=t.never=t.merge=void 0,t.switchMap=t.switchAll=t.subscribeOn=t.startWith=t.skipWhile=t.skipUntil=t.skipLast=t.skip=t.single=t.shareReplay=t.share=t.sequenceEqual=t.scan=t.sampleTime=t.sample=t.refCount=t.retryWhen=t.retry=t.repeatWhen=t.repeat=t.reduce=t.raceWith=t.publishReplay=t.publishLast=t.publishBehavior=t.publish=t.pluck=t.pairwise=t.onErrorResumeNextWith=t.observeOn=t.multicast=t.min=t.mergeWith=t.mergeScan=t.mergeMapTo=t.mergeMap=t.flatMap=t.mergeAll=t.max=t.materialize=t.mapTo=t.map=t.last=t.isEmpty=t.ignoreElements=t.groupBy=t.first=t.findIndex=t.find=t.finalize=void 0,t.zipWith=t.zipAll=t.withLatestFrom=t.windowWhen=t.windowToggle=t.windowTime=t.windowCount=t.window=t.toArray=t.timestamp=t.timeoutWith=t.timeout=t.timeInterval=t.throwIfEmpty=t.throttleTime=t.throttle=t.tap=t.takeWhile=t.takeUntil=t.takeLast=t.take=t.switchScan=t.switchMapTo=void 0;var i=r(2419);Object.defineProperty(t,"Observable",{enumerable:!0,get:function(){return i.Observable}});var u=r(9518);Object.defineProperty(t,"ConnectableObservable",{enumerable:!0,get:function(){return u.ConnectableObservable}});var a=r(2801);Object.defineProperty(t,"observable",{enumerable:!0,get:function(){return a.observable}});var c=r(9106);Object.defineProperty(t,"animationFrames",{enumerable:!0,get:function(){return c.animationFrames}});var l=r(3032);Object.defineProperty(t,"Subject",{enumerable:!0,get:function(){return l.Subject}});var s=r(5240);Object.defineProperty(t,"BehaviorSubject",{enumerable:!0,get:function(){return s.BehaviorSubject}});var f=r(3274);Object.defineProperty(t,"ReplaySubject",{enumerable:!0,get:function(){return f.ReplaySubject}});var d=r(280);Object.defineProperty(t,"AsyncSubject",{enumerable:!0,get:function(){return d.AsyncSubject}});var v=r(580);Object.defineProperty(t,"asap",{enumerable:!0,get:function(){return v.asap}}),Object.defineProperty(t,"asapScheduler",{enumerable:!0,get:function(){return v.asapScheduler}});var p=r(2445);Object.defineProperty(t,"async",{enumerable:!0,get:function(){return p.async}}),Object.defineProperty(t,"asyncScheduler",{enumerable:!0,get:function(){return p.asyncScheduler}});var b=r(8615);Object.defineProperty(t,"queue",{enumerable:!0,get:function(){return b.queue}}),Object.defineProperty(t,"queueScheduler",{enumerable:!0,get:function(){return b.queueScheduler}});var h=r(3660);Object.defineProperty(t,"animationFrame",{enumerable:!0,get:function(){return h.animationFrame}}),Object.defineProperty(t,"animationFrameScheduler",{enumerable:!0,get:function(){return h.animationFrameScheduler}});var y=r(4123);Object.defineProperty(t,"VirtualTimeScheduler",{enumerable:!0,get:function(){return y.VirtualTimeScheduler}}),Object.defineProperty(t,"VirtualAction",{enumerable:!0,get:function(){return y.VirtualAction}});var m=r(218);Object.defineProperty(t,"Scheduler",{enumerable:!0,get:function(){return m.Scheduler}});var _=r(3865);Object.defineProperty(t,"Subscription",{enumerable:!0,get:function(){return _.Subscription}});var g=r(5125);Object.defineProperty(t,"Subscriber",{enumerable:!0,get:function(){return g.Subscriber}});var O=r(3104);Object.defineProperty(t,"Notification",{enumerable:!0,get:function(){return O.Notification}}),Object.defineProperty(t,"NotificationKind",{enumerable:!0,get:function(){return O.NotificationKind}});var w=r(9985);Object.defineProperty(t,"pipe",{enumerable:!0,get:function(){return w.pipe}});var j=r(2576);Object.defineProperty(t,"noop",{enumerable:!0,get:function(){return j.noop}});var P=r(4781);Object.defineProperty(t,"identity",{enumerable:!0,get:function(){return P.identity}});var S=r(8386);Object.defineProperty(t,"isObservable",{enumerable:!0,get:function(){return S.isObservable}});var M=r(9309);Object.defineProperty(t,"lastValueFrom",{enumerable:!0,get:function(){return M.lastValueFrom}});var x=r(8182);Object.defineProperty(t,"firstValueFrom",{enumerable:!0,get:function(){return x.firstValueFrom}});var E=r(2351);Object.defineProperty(t,"ArgumentOutOfRangeError",{enumerable:!0,get:function(){return E.ArgumentOutOfRangeError}});var A=r(9474);Object.defineProperty(t,"EmptyError",{enumerable:!0,get:function(){return A.EmptyError}});var C=r(8598);Object.defineProperty(t,"NotFoundError",{enumerable:!0,get:function(){return C.NotFoundError}});var I=r(2642);Object.defineProperty(t,"ObjectUnsubscribedError",{enumerable:!0,get:function(){return I.ObjectUnsubscribedError}});var T=r(6156);Object.defineProperty(t,"SequenceError",{enumerable:!0,get:function(){return T.SequenceError}});var F=r(4173);Object.defineProperty(t,"TimeoutError",{enumerable:!0,get:function(){return F.TimeoutError}});var k=r(4805);Object.defineProperty(t,"UnsubscriptionError",{enumerable:!0,get:function(){return k.UnsubscriptionError}});var R=r(3050);Object.defineProperty(t,"bindCallback",{enumerable:!0,get:function(){return R.bindCallback}});var L=r(8130);Object.defineProperty(t,"bindNodeCallback",{enumerable:!0,get:function(){return L.bindNodeCallback}});var N=r(9258);Object.defineProperty(t,"combineLatest",{enumerable:!0,get:function(){return N.combineLatest}});var W=r(2239);Object.defineProperty(t,"concat",{enumerable:!0,get:function(){return W.concat}});var V=r(2873);Object.defineProperty(t,"connectable",{enumerable:!0,get:function(){return V.connectable}});var z=r(7885);Object.defineProperty(t,"defer",{enumerable:!0,get:function(){return z.defer}});var U=r(6332);Object.defineProperty(t,"empty",{enumerable:!0,get:function(){return U.empty}});var H=r(7245);Object.defineProperty(t,"forkJoin",{enumerable:!0,get:function(){return H.forkJoin}});var q=r(5432);Object.defineProperty(t,"from",{enumerable:!0,get:function(){return q.from}});var D=r(3267);Object.defineProperty(t,"fromEvent",{enumerable:!0,get:function(){return D.fromEvent}});var Y=r(470);Object.defineProperty(t,"fromEventPattern",{enumerable:!0,get:function(){return Y.fromEventPattern}});var B=r(4303);Object.defineProperty(t,"generate",{enumerable:!0,get:function(){return B.generate}});var X=r(1757);Object.defineProperty(t,"iif",{enumerable:!0,get:function(){return X.iif}});var K=r(8990);Object.defineProperty(t,"interval",{enumerable:!0,get:function(){return K.interval}});var Z=r(1846);Object.defineProperty(t,"merge",{enumerable:!0,get:function(){return Z.merge}});var G=r(1339);Object.defineProperty(t,"never",{enumerable:!0,get:function(){return G.never}});var Q=r(5726);Object.defineProperty(t,"of",{enumerable:!0,get:function(){return Q.of}});var $=r(724);Object.defineProperty(t,"onErrorResumeNext",{enumerable:!0,get:function(){return $.onErrorResumeNext}});var J=r(4380);Object.defineProperty(t,"pairs",{enumerable:!0,get:function(){return J.pairs}});var ee=r(7273);Object.defineProperty(t,"partition",{enumerable:!0,get:function(){return ee.partition}});var te=r(5182);Object.defineProperty(t,"race",{enumerable:!0,get:function(){return te.race}});var re=r(322);Object.defineProperty(t,"range",{enumerable:!0,get:function(){return re.range}});var ne=r(2098);Object.defineProperty(t,"throwError",{enumerable:!0,get:function(){return ne.throwError}});var oe=r(7513);Object.defineProperty(t,"timer",{enumerable:!0,get:function(){return oe.timer}});var ie=r(2962);Object.defineProperty(t,"using",{enumerable:!0,get:function(){return ie.using}});var ue=r(7654);Object.defineProperty(t,"zip",{enumerable:!0,get:function(){return ue.zip}});var ae=r(5207);Object.defineProperty(t,"scheduled",{enumerable:!0,get:function(){return ae.scheduled}});var ce=r(6332);Object.defineProperty(t,"EMPTY",{enumerable:!0,get:function(){return ce.EMPTY}});var le=r(1339);Object.defineProperty(t,"NEVER",{enumerable:!0,get:function(){return le.NEVER}}),o(r(8433),t);var se=r(3280);Object.defineProperty(t,"config",{enumerable:!0,get:function(){return se.config}});var fe=r(6474);Object.defineProperty(t,"audit",{enumerable:!0,get:function(){return fe.audit}});var de=r(5382);Object.defineProperty(t,"auditTime",{enumerable:!0,get:function(){return de.auditTime}});var ve=r(9715);Object.defineProperty(t,"buffer",{enumerable:!0,get:function(){return ve.buffer}});var pe=r(3814);Object.defineProperty(t,"bufferCount",{enumerable:!0,get:function(){return pe.bufferCount}});var be=r(7211);Object.defineProperty(t,"bufferTime",{enumerable:!0,get:function(){return be.bufferTime}});var he=r(4943);Object.defineProperty(t,"bufferToggle",{enumerable:!0,get:function(){return he.bufferToggle}});var ye=r(1240);Object.defineProperty(t,"bufferWhen",{enumerable:!0,get:function(){return ye.bufferWhen}});var me=r(9548);Object.defineProperty(t,"catchError",{enumerable:!0,get:function(){return me.catchError}});var _e=r(2128);Object.defineProperty(t,"combineAll",{enumerable:!0,get:function(){return _e.combineAll}});var ge=r(3240);Object.defineProperty(t,"combineLatestAll",{enumerable:!0,get:function(){return ge.combineLatestAll}});var Oe=r(5024);Object.defineProperty(t,"combineLatestWith",{enumerable:!0,get:function(){return Oe.combineLatestWith}});var we=r(4413);Object.defineProperty(t,"concatAll",{enumerable:!0,get:function(){return we.concatAll}});var je=r(7498);Object.defineProperty(t,"concatMap",{enumerable:!0,get:function(){return je.concatMap}});var Pe=r(6109);Object.defineProperty(t,"concatMapTo",{enumerable:!0,get:function(){return Pe.concatMapTo}});var Se=r(9664);Object.defineProperty(t,"concatWith",{enumerable:!0,get:function(){return Se.concatWith}});var Me=r(1995);Object.defineProperty(t,"connect",{enumerable:!0,get:function(){return Me.connect}});var xe=r(993);Object.defineProperty(t,"count",{enumerable:!0,get:function(){return xe.count}});var Ee=r(496);Object.defineProperty(t,"debounce",{enumerable:!0,get:function(){return Ee.debounce}});var Ae=r(1385);Object.defineProperty(t,"debounceTime",{enumerable:!0,get:function(){return Ae.debounceTime}});var Ce=r(1658);Object.defineProperty(t,"defaultIfEmpty",{enumerable:!0,get:function(){return Ce.defaultIfEmpty}});var Ie=r(5841);Object.defineProperty(t,"delay",{enumerable:!0,get:function(){return Ie.delay}});var Te=r(8798);Object.defineProperty(t,"delayWhen",{enumerable:!0,get:function(){return Te.delayWhen}});var Fe=r(1080);Object.defineProperty(t,"dematerialize",{enumerable:!0,get:function(){return Fe.dematerialize}});var ke=r(3054);Object.defineProperty(t,"distinct",{enumerable:!0,get:function(){return ke.distinct}});var Re=r(8737);Object.defineProperty(t,"distinctUntilChanged",{enumerable:!0,get:function(){return Re.distinctUntilChanged}});var Le=r(7957);Object.defineProperty(t,"distinctUntilKeyChanged",{enumerable:!0,get:function(){return Le.distinctUntilKeyChanged}});var Ne=r(8633);Object.defineProperty(t,"elementAt",{enumerable:!0,get:function(){return Ne.elementAt}});var We=r(911);Object.defineProperty(t,"endWith",{enumerable:!0,get:function(){return We.endWith}});var Ve=r(2096);Object.defineProperty(t,"every",{enumerable:!0,get:function(){return Ve.every}});var ze=r(67);Object.defineProperty(t,"exhaust",{enumerable:!0,get:function(){return ze.exhaust}});var Ue=r(5337);Object.defineProperty(t,"exhaustAll",{enumerable:!0,get:function(){return Ue.exhaustAll}});var He=r(5635);Object.defineProperty(t,"exhaustMap",{enumerable:!0,get:function(){return He.exhaustMap}});var qe=r(9745);Object.defineProperty(t,"expand",{enumerable:!0,get:function(){return qe.expand}});var De=r(9154);Object.defineProperty(t,"filter",{enumerable:!0,get:function(){return De.filter}});var Ye=r(9283);Object.defineProperty(t,"finalize",{enumerable:!0,get:function(){return Ye.finalize}});var Be=r(7119);Object.defineProperty(t,"find",{enumerable:!0,get:function(){return Be.find}});var Xe=r(4706);Object.defineProperty(t,"findIndex",{enumerable:!0,get:function(){return Xe.findIndex}});var Ke=r(9219);Object.defineProperty(t,"first",{enumerable:!0,get:function(){return Ke.first}});var Ze=r(9749);Object.defineProperty(t,"groupBy",{enumerable:!0,get:function(){return Ze.groupBy}});var Ge=r(9438);Object.defineProperty(t,"ignoreElements",{enumerable:!0,get:function(){return Ge.ignoreElements}});var Qe=r(8515);Object.defineProperty(t,"isEmpty",{enumerable:!0,get:function(){return Qe.isEmpty}});var $e=r(2435);Object.defineProperty(t,"last",{enumerable:!0,get:function(){return $e.last}});var Je=r(7291);Object.defineProperty(t,"map",{enumerable:!0,get:function(){return Je.map}});var et=r(8313);Object.defineProperty(t,"mapTo",{enumerable:!0,get:function(){return et.mapTo}});var tt=r(3209);Object.defineProperty(t,"materialize",{enumerable:!0,get:function(){return tt.materialize}});var rt=r(2620);Object.defineProperty(t,"max",{enumerable:!0,get:function(){return rt.max}});var nt=r(3783);Object.defineProperty(t,"mergeAll",{enumerable:!0,get:function(){return nt.mergeAll}});var ot=r(1788);Object.defineProperty(t,"flatMap",{enumerable:!0,get:function(){return ot.flatMap}});var it=r(9475);Object.defineProperty(t,"mergeMap",{enumerable:!0,get:function(){return it.mergeMap}});var ut=r(1211);Object.defineProperty(t,"mergeMapTo",{enumerable:!0,get:function(){return ut.mergeMapTo}});var at=r(7267);Object.defineProperty(t,"mergeScan",{enumerable:!0,get:function(){return at.mergeScan}});var ct=r(9303);Object.defineProperty(t,"mergeWith",{enumerable:!0,get:function(){return ct.mergeWith}});var lt=r(9714);Object.defineProperty(t,"min",{enumerable:!0,get:function(){return lt.min}});var st=r(3848);Object.defineProperty(t,"multicast",{enumerable:!0,get:function(){return st.multicast}});var ft=r(1184);Object.defineProperty(t,"observeOn",{enumerable:!0,get:function(){return ft.observeOn}});var dt=r(7582);Object.defineProperty(t,"onErrorResumeNextWith",{enumerable:!0,get:function(){return dt.onErrorResumeNextWith}});var vt=r(2731);Object.defineProperty(t,"pairwise",{enumerable:!0,get:function(){return vt.pairwise}});var pt=r(4691);Object.defineProperty(t,"pluck",{enumerable:!0,get:function(){return pt.pluck}});var bt=r(4474);Object.defineProperty(t,"publish",{enumerable:!0,get:function(){return bt.publish}});var ht=r(52);Object.defineProperty(t,"publishBehavior",{enumerable:!0,get:function(){return ht.publishBehavior}});var yt=r(2110);Object.defineProperty(t,"publishLast",{enumerable:!0,get:function(){return yt.publishLast}});var mt=r(9864);Object.defineProperty(t,"publishReplay",{enumerable:!0,get:function(){return mt.publishReplay}});var _t=r(179);Object.defineProperty(t,"raceWith",{enumerable:!0,get:function(){return _t.raceWith}});var gt=r(122);Object.defineProperty(t,"reduce",{enumerable:!0,get:function(){return gt.reduce}});var Ot=r(5313);Object.defineProperty(t,"repeat",{enumerable:!0,get:function(){return Ot.repeat}});var wt=r(4068);Object.defineProperty(t,"repeatWhen",{enumerable:!0,get:function(){return wt.repeatWhen}});var jt=r(64);Object.defineProperty(t,"retry",{enumerable:!0,get:function(){return jt.retry}});var Pt=r(1188);Object.defineProperty(t,"retryWhen",{enumerable:!0,get:function(){return Pt.retryWhen}});var St=r(8739);Object.defineProperty(t,"refCount",{enumerable:!0,get:function(){return St.refCount}});var Mt=r(4193);Object.defineProperty(t,"sample",{enumerable:!0,get:function(){return Mt.sample}});var xt=r(6170);Object.defineProperty(t,"sampleTime",{enumerable:!0,get:function(){return xt.sampleTime}});var Et=r(5876);Object.defineProperty(t,"scan",{enumerable:!0,get:function(){return Et.scan}});var At=r(1791);Object.defineProperty(t,"sequenceEqual",{enumerable:!0,get:function(){return At.sequenceEqual}});var Ct=r(5137);Object.defineProperty(t,"share",{enumerable:!0,get:function(){return Ct.share}});var It=r(1348);Object.defineProperty(t,"shareReplay",{enumerable:!0,get:function(){return It.shareReplay}});var Tt=r(8242);Object.defineProperty(t,"single",{enumerable:!0,get:function(){return Tt.single}});var Ft=r(3169);Object.defineProperty(t,"skip",{enumerable:!0,get:function(){return Ft.skip}});var kt=r(2454);Object.defineProperty(t,"skipLast",{enumerable:!0,get:function(){return kt.skipLast}});var Rt=r(6931);Object.defineProperty(t,"skipUntil",{enumerable:!0,get:function(){return Rt.skipUntil}});var Lt=r(7913);Object.defineProperty(t,"skipWhile",{enumerable:!0,get:function(){return Lt.skipWhile}});var Nt=r(9234);Object.defineProperty(t,"startWith",{enumerable:!0,get:function(){return Nt.startWith}});var Wt=r(276);Object.defineProperty(t,"subscribeOn",{enumerable:!0,get:function(){return Wt.subscribeOn}});var Vt=r(9253);Object.defineProperty(t,"switchAll",{enumerable:!0,get:function(){return Vt.switchAll}});var zt=r(8518);Object.defineProperty(t,"switchMap",{enumerable:!0,get:function(){return zt.switchMap}});var Ut=r(1173);Object.defineProperty(t,"switchMapTo",{enumerable:!0,get:function(){return Ut.switchMapTo}});var Ht=r(3855);Object.defineProperty(t,"switchScan",{enumerable:!0,get:function(){return Ht.switchScan}});var qt=r(4783);Object.defineProperty(t,"take",{enumerable:!0,get:function(){return qt.take}});var Dt=r(1980);Object.defineProperty(t,"takeLast",{enumerable:!0,get:function(){return Dt.takeLast}});var Yt=r(9845);Object.defineProperty(t,"takeUntil",{enumerable:!0,get:function(){return Yt.takeUntil}});var Bt=r(6060);Object.defineProperty(t,"takeWhile",{enumerable:!0,get:function(){return Bt.takeWhile}});var Xt=r(1138);Object.defineProperty(t,"tap",{enumerable:!0,get:function(){return Xt.tap}});var Kt=r(7306);Object.defineProperty(t,"throttle",{enumerable:!0,get:function(){return Kt.throttle}});var Zt=r(8968);Object.defineProperty(t,"throttleTime",{enumerable:!0,get:function(){return Zt.throttleTime}});var Gt=r(1779);Object.defineProperty(t,"throwIfEmpty",{enumerable:!0,get:function(){return Gt.throwIfEmpty}});var Qt=r(8005);Object.defineProperty(t,"timeInterval",{enumerable:!0,get:function(){return Qt.timeInterval}});var $t=r(4173);Object.defineProperty(t,"timeout",{enumerable:!0,get:function(){return $t.timeout}});var Jt=r(7223);Object.defineProperty(t,"timeoutWith",{enumerable:!0,get:function(){return Jt.timeoutWith}});var er=r(8975);Object.defineProperty(t,"timestamp",{enumerable:!0,get:function(){return er.timestamp}});var tr=r(2);Object.defineProperty(t,"toArray",{enumerable:!0,get:function(){return tr.toArray}});var rr=r(2826);Object.defineProperty(t,"window",{enumerable:!0,get:function(){return rr.window}});var nr=r(7526);Object.defineProperty(t,"windowCount",{enumerable:!0,get:function(){return nr.windowCount}});var or=r(8294);Object.defineProperty(t,"windowTime",{enumerable:!0,get:function(){return or.windowTime}});var ir=r(1883);Object.defineProperty(t,"windowToggle",{enumerable:!0,get:function(){return ir.windowToggle}});var ur=r(4309);Object.defineProperty(t,"windowWhen",{enumerable:!0,get:function(){return ur.windowWhen}});var ar=r(3041);Object.defineProperty(t,"withLatestFrom",{enumerable:!0,get:function(){return ar.withLatestFrom}});var cr=r(8593);Object.defineProperty(t,"zipAll",{enumerable:!0,get:function(){return cr.zipAll}});var lr=r(8096);Object.defineProperty(t,"zipWith",{enumerable:!0,get:function(){return lr.zipWith}})},280:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncSubject=void 0;var i=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._value=null,t._hasValue=!1,t._isComplete=!1,t}return o(t,e),t.prototype._checkFinalizedStatuses=function(e){var t=this,r=t.hasError,n=t._hasValue,o=t._value,i=t.thrownError,u=t.isStopped,a=t._isComplete;r?e.error(i):(u||a)&&(n&&e.next(o),e.complete())},t.prototype.next=function(e){this.isStopped||(this._value=e,this._hasValue=!0)},t.prototype.complete=function(){var t=this,r=t._hasValue,n=t._value;t._isComplete||(this._isComplete=!0,r&&e.prototype.next.call(this,n),e.prototype.complete.call(this))},t}(r(3032).Subject);t.AsyncSubject=i},5240:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.BehaviorSubject=void 0;var i=function(e){function t(t){var r=e.call(this)||this;return r._value=t,r}return o(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),t.prototype._subscribe=function(t){var r=e.prototype._subscribe.call(this,t);return!r.closed&&t.next(this._value),r},t.prototype.getValue=function(){var e=this,t=e.hasError,r=e.thrownError,n=e._value;if(t)throw r;return this._throwIfClosed(),n},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(r(3032).Subject);t.BehaviorSubject=i},3104:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observeNotification=t.Notification=t.NotificationKind=void 0;var n,o=r(6332),i=r(5726),u=r(2098),a=r(3005);(n=t.NotificationKind||(t.NotificationKind={})).NEXT="N",n.ERROR="E",n.COMPLETE="C";var c=function(){function e(e,t,r){this.kind=e,this.value=t,this.error=r,this.hasValue="N"===e}return e.prototype.observe=function(e){return l(this,e)},e.prototype.do=function(e,t,r){var n=this,o=n.kind,i=n.value,u=n.error;return"N"===o?null==e?void 0:e(i):"E"===o?null==t?void 0:t(u):null==r?void 0:r()},e.prototype.accept=function(e,t,r){var n;return a.isFunction(null===(n=e)||void 0===n?void 0:n.next)?this.observe(e):this.do(e,t,r)},e.prototype.toObservable=function(){var e=this,t=e.kind,r=e.value,n=e.error,a="N"===t?i.of(r):"E"===t?u.throwError((function(){return n})):"C"===t?o.EMPTY:0;if(!a)throw new TypeError("Unexpected notification kind "+t);return a},e.createNext=function(t){return new e("N",t)},e.createError=function(t){return new e("E",void 0,t)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e}();function l(e,t){var r,n,o,i=e,u=i.kind,a=i.value,c=i.error;if("string"!=typeof u)throw new TypeError('Invalid notification, missing "kind"');"N"===u?null===(r=t.next)||void 0===r||r.call(t,a):"E"===u?null===(n=t.error)||void 0===n||n.call(t,c):null===(o=t.complete)||void 0===o||o.call(t)}t.Notification=c,t.observeNotification=l},7286:(e,t)=>{function r(e,t,r){return{kind:e,value:t,error:r}}Object.defineProperty(t,"__esModule",{value:!0}),t.createNotification=t.nextNotification=t.errorNotification=t.COMPLETE_NOTIFICATION=void 0,t.COMPLETE_NOTIFICATION=r("C",void 0,void 0),t.errorNotification=function(e){return r("E",void 0,e)},t.nextNotification=function(e){return r("N",e,void 0)},t.createNotification=r},2419:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Observable=void 0;var n=r(5125),o=r(3865),i=r(2801),u=r(9985),a=r(3280),c=r(3005),l=r(6110),s=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var i,u=this,a=(i=e)&&i instanceof n.Subscriber||function(e){return e&&c.isFunction(e.next)&&c.isFunction(e.error)&&c.isFunction(e.complete)}(i)&&o.isSubscription(i)?e:new n.SafeSubscriber(e,t,r);return l.errorContext((function(){var e=u,t=e.operator,r=e.source;a.add(t?t.call(a,r):r?u._subscribe(a):u._trySubscribe(a))})),a},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=f(t))((function(t,o){var i=new n.SafeSubscriber({next:function(t){try{e(t)}catch(e){o(e),i.unsubscribe()}},error:o,complete:t});r.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[i.observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return u.pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=f(e))((function(e,r){var n;t.subscribe((function(e){return n=e}),(function(e){return r(e)}),(function(){return e(n)}))}))},e.create=function(t){return new e(t)},e}();function f(e){var t;return null!==(t=null!=e?e:a.config.Promise)&&void 0!==t?t:Promise}t.Observable=s},3274:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.ReplaySubject=void 0;var i=r(3032),u=r(7950),a=function(e){function t(t,r,n){void 0===t&&(t=1/0),void 0===r&&(r=1/0),void 0===n&&(n=u.dateTimestampProvider);var o=e.call(this)||this;return o._bufferSize=t,o._windowTime=r,o._timestampProvider=n,o._buffer=[],o._infiniteTimeWindow=!0,o._infiniteTimeWindow=r===1/0,o._bufferSize=Math.max(1,t),o._windowTime=Math.max(1,r),o}return o(t,e),t.prototype.next=function(t){var r=this,n=r.isStopped,o=r._buffer,i=r._infiniteTimeWindow,u=r._timestampProvider,a=r._windowTime;n||(o.push(t),!i&&o.push(u.now()+a)),this._trimBuffer(),e.prototype.next.call(this,t)},t.prototype._subscribe=function(e){this._throwIfClosed(),this._trimBuffer();for(var t=this._innerSubscribe(e),r=this._infiniteTimeWindow,n=this._buffer.slice(),o=0;o<n.length&&!e.closed;o+=r?1:2)e.next(n[o]);return this._checkFinalizedStatuses(e),t},t.prototype._trimBuffer=function(){var e=this,t=e._bufferSize,r=e._timestampProvider,n=e._buffer,o=e._infiniteTimeWindow,i=(o?1:2)*t;if(t<1/0&&i<n.length&&n.splice(0,n.length-i),!o){for(var u=r.now(),a=0,c=1;c<n.length&&n[c]<=u;c+=2)a=c;a&&n.splice(0,a+1)}},t}(i.Subject);t.ReplaySubject=a},218:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Scheduler=void 0;var n=r(7950),o=function(){function e(t,r){void 0===r&&(r=e.now),this.schedulerActionCtor=t,this.now=r}return e.prototype.schedule=function(e,t,r){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(r,t)},e.now=n.dateTimestampProvider.now,e}();t.Scheduler=o},3032:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.AnonymousSubject=t.Subject=void 0;var u=r(2419),a=r(3865),c=r(2642),l=r(6967),s=r(6110),f=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return o(t,e),t.prototype.lift=function(e){var t=new d(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new c.ObjectUnsubscribedError},t.prototype.next=function(e){var t=this;s.errorContext((function(){var r,n;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var o=i(t.currentObservers),u=o.next();!u.done;u=o.next())u.value.next(e)}catch(e){r={error:e}}finally{try{u&&!u.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}}}))},t.prototype.error=function(e){var t=this;s.errorContext((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var r=t.observers;r.length;)r.shift().error(e)}}))},t.prototype.complete=function(){var e=this;s.errorContext((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,r=this,n=r.hasError,o=r.isStopped,i=r.observers;return n||o?a.EMPTY_SUBSCRIPTION:(this.currentObservers=null,i.push(e),new a.Subscription((function(){t.currentObservers=null,l.arrRemove(i,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,r=t.hasError,n=t.thrownError,o=t.isStopped;r?e.error(n):o&&e.complete()},t.prototype.asObservable=function(){var e=new u.Observable;return e.source=this,e},t.create=function(e,t){return new d(e,t)},t}(u.Observable);t.Subject=f;var d=function(e){function t(t,r){var n=e.call(this)||this;return n.destination=t,n.source=r,n}return o(t,e),t.prototype.next=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===r||r.call(t,e)},t.prototype.error=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===r||r.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,r;return null!==(r=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==r?r:a.EMPTY_SUBSCRIPTION},t}(f);t.AnonymousSubject=d},5125:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.EMPTY_OBSERVER=t.SafeSubscriber=t.Subscriber=void 0;var i=r(3005),u=r(3865),a=r(3280),c=r(7968),l=r(2576),s=r(7286),f=r(4590),d=r(6110),v=function(e){function r(r){var n=e.call(this)||this;return n.isStopped=!1,r?(n.destination=r,u.isSubscription(r)&&r.add(n)):n.destination=t.EMPTY_OBSERVER,n}return o(r,e),r.create=function(e,t,r){return new y(e,t,r)},r.prototype.next=function(e){this.isStopped?_(s.nextNotification(e),this):this._next(e)},r.prototype.error=function(e){this.isStopped?_(s.errorNotification(e),this):(this.isStopped=!0,this._error(e))},r.prototype.complete=function(){this.isStopped?_(s.COMPLETE_NOTIFICATION,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(e){this.destination.next(e)},r.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(u.Subscription);t.Subscriber=v;var p=Function.prototype.bind;function b(e,t){return p.call(e,t)}var h=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){m(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){m(e)}else m(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){m(e)}},e}(),y=function(e){function t(t,r,n){var o,u,c=e.call(this)||this;return i.isFunction(t)||!t?o={next:null!=t?t:void 0,error:null!=r?r:void 0,complete:null!=n?n:void 0}:c&&a.config.useDeprecatedNextContext?((u=Object.create(t)).unsubscribe=function(){return c.unsubscribe()},o={next:t.next&&b(t.next,u),error:t.error&&b(t.error,u),complete:t.complete&&b(t.complete,u)}):o=t,c.destination=new h(o),c}return o(t,e),t}(v);function m(e){a.config.useDeprecatedSynchronousErrorHandling?d.captureError(e):c.reportUnhandledError(e)}function _(e,t){var r=a.config.onStoppedNotification;r&&f.timeoutProvider.setTimeout((function(){return r(e,t)}))}t.SafeSubscriber=y,t.EMPTY_OBSERVER={closed:!0,next:l.noop,error:function(e){throw e},complete:l.noop}},3865:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},i=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.isSubscription=t.EMPTY_SUBSCRIPTION=t.Subscription=void 0;var u=r(3005),a=r(4805),c=r(6967),l=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,r,c,l;if(!this.closed){this.closed=!0;var f=this._parentage;if(f)if(this._parentage=null,Array.isArray(f))try{for(var d=n(f),v=d.next();!v.done;v=d.next())v.value.remove(this)}catch(t){e={error:t}}finally{try{v&&!v.done&&(t=d.return)&&t.call(d)}finally{if(e)throw e.error}}else f.remove(this);var p=this.initialTeardown;if(u.isFunction(p))try{p()}catch(e){l=e instanceof a.UnsubscriptionError?e.errors:[e]}var b=this._finalizers;if(b){this._finalizers=null;try{for(var h=n(b),y=h.next();!y.done;y=h.next()){var m=y.value;try{s(m)}catch(e){l=null!=l?l:[],e instanceof a.UnsubscriptionError?l=i(i([],o(l)),o(e.errors)):l.push(e)}}}catch(e){r={error:e}}finally{try{y&&!y.done&&(c=h.return)&&c.call(h)}finally{if(r)throw r.error}}}if(l)throw new a.UnsubscriptionError(l)}},e.prototype.add=function(t){var r;if(t&&t!==this)if(this.closed)s(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&c.arrRemove(t,e)},e.prototype.remove=function(t){var r=this._finalizers;r&&c.arrRemove(r,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function s(e){u.isFunction(e)?e():e.unsubscribe()}t.Subscription=l,t.EMPTY_SUBSCRIPTION=l.EMPTY,t.isSubscription=function(e){return e instanceof l||e&&"closed"in e&&u.isFunction(e.remove)&&u.isFunction(e.add)&&u.isFunction(e.unsubscribe)}},3280:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.config=void 0,t.config={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1}},8182:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.firstValueFrom=void 0;var n=r(9474),o=r(5125);t.firstValueFrom=function(e,t){var r="object"==typeof t;return new Promise((function(i,u){var a=new o.SafeSubscriber({next:function(e){i(e),a.unsubscribe()},error:u,complete:function(){r?i(t.defaultValue):u(new n.EmptyError)}});e.subscribe(a)}))}},9309:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lastValueFrom=void 0;var n=r(9474);t.lastValueFrom=function(e,t){var r="object"==typeof t;return new Promise((function(o,i){var u,a=!1;e.subscribe({next:function(e){u=e,a=!0},error:i,complete:function(){a?o(u):r?o(t.defaultValue):i(new n.EmptyError)}})}))}},9518:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectableObservable=void 0;var i=r(2419),u=r(3865),a=r(8739),c=r(4990),l=r(4935),s=function(e){function t(t,r){var n=e.call(this)||this;return n.source=t,n.subjectFactory=r,n._subject=null,n._refCount=0,n._connection=null,l.hasLift(t)&&(n.lift=t.lift),n}return o(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},t.prototype._teardown=function(){this._refCount=0;var e=this._connection;this._subject=this._connection=null,null==e||e.unsubscribe()},t.prototype.connect=function(){var e=this,t=this._connection;if(!t){t=this._connection=new u.Subscription;var r=this.getSubject();t.add(this.source.subscribe(c.createOperatorSubscriber(r,void 0,(function(){e._teardown(),r.complete()}),(function(t){e._teardown(),r.error(t)}),(function(){return e._teardown()})))),t.closed&&(this._connection=null,t=u.Subscription.EMPTY)}return t},t.prototype.refCount=function(){return a.refCount()(this)},t}(i.Observable);t.ConnectableObservable=s},3050:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bindCallback=void 0;var n=r(9592);t.bindCallback=function(e,t,r){return n.bindCallbackInternals(!1,e,t,r)}},9592:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.bindCallbackInternals=void 0;var i=r(9016),u=r(2419),a=r(276),c=r(1914),l=r(1184),s=r(280);t.bindCallbackInternals=function e(t,r,f,d){if(f){if(!i.isScheduler(f))return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e(t,r,d).apply(this,n).pipe(c.mapOneOrManyArgs(f))};d=f}return d?function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e(t,r).apply(this,n).pipe(a.subscribeOn(d),l.observeOn(d))}:function(){for(var e=this,i=[],a=0;a<arguments.length;a++)i[a]=arguments[a];var c=new s.AsyncSubject,l=!0;return new u.Observable((function(u){var a=c.subscribe(u);if(l){l=!1;var s=!1,f=!1;r.apply(e,o(o([],n(i)),[function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];if(t){var n=e.shift();if(null!=n)return void c.error(n)}c.next(1<e.length?e:e[0]),f=!0,s&&c.complete()}])),f&&c.complete(),s=!0}return a}))}}},8130:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bindNodeCallback=void 0;var n=r(9592);t.bindNodeCallback=function(e,t,r){return n.bindCallbackInternals(!0,e,t,r)}},9258:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestInit=t.combineLatest=void 0;var n=r(2419),o=r(1203),i=r(5432),u=r(4781),a=r(1914),c=r(2433),l=r(641),s=r(4990),f=r(7738);function d(e,t,r){return void 0===r&&(r=u.identity),function(n){v(t,(function(){for(var o=e.length,u=new Array(o),a=o,c=o,l=function(o){v(t,(function(){var l=i.from(e[o],t),f=!1;l.subscribe(s.createOperatorSubscriber(n,(function(e){u[o]=e,f||(f=!0,c--),c||n.next(r(u.slice()))}),(function(){--a||n.complete()})))}),n)},f=0;f<o;f++)l(f)}),n)}}function v(e,t,r){e?f.executeSchedule(r,e,t):t()}t.combineLatest=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=c.popScheduler(e),s=c.popResultSelector(e),f=o.argsArgArrayOrObject(e),v=f.args,p=f.keys;if(0===v.length)return i.from([],r);var b=new n.Observable(d(v,r,p?function(e){return l.createObject(p,e)}:u.identity));return s?b.pipe(a.mapOneOrManyArgs(s)):b},t.combineLatestInit=d},2239:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concat=void 0;var n=r(4413),o=r(2433),i=r(5432);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.concatAll()(i.from(e,o.popScheduler(e)))}},2873:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.connectable=void 0;var n=r(3032),o=r(2419),i=r(7885),u={connector:function(){return new n.Subject},resetOnDisconnect:!0};t.connectable=function(e,t){void 0===t&&(t=u);var r=null,n=t.connector,a=t.resetOnDisconnect,c=void 0===a||a,l=n(),s=new o.Observable((function(e){return l.subscribe(e)}));return s.connect=function(){return r&&!r.closed||(r=i.defer((function(){return e})).subscribe(l),c&&r.add((function(){return l=n()}))),r},s}},7885:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defer=void 0;var n=r(2419),o=r(7103);t.defer=function(e){return new n.Observable((function(t){o.innerFrom(e()).subscribe(t)}))}},9106:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.animationFrames=void 0;var n=r(2419),o=r(6813),i=r(505);function u(e){return new n.Observable((function(t){var r=e||o.performanceTimestampProvider,n=r.now(),u=0,a=function(){t.closed||(u=i.animationFrameProvider.requestAnimationFrame((function(o){u=0;var i=r.now();t.next({timestamp:e?i:o,elapsed:i-n}),a()})))};return a(),function(){u&&i.animationFrameProvider.cancelAnimationFrame(u)}}))}t.animationFrames=function(e){return e?u(e):a};var a=u()},6332:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.empty=t.EMPTY=void 0;var n=r(2419);t.EMPTY=new n.Observable((function(e){return e.complete()})),t.empty=function(e){return e?function(e){return new n.Observable((function(t){return e.schedule((function(){return t.complete()}))}))}(e):t.EMPTY}},7245:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.forkJoin=void 0;var n=r(2419),o=r(1203),i=r(7103),u=r(2433),a=r(4990),c=r(1914),l=r(641);t.forkJoin=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=u.popResultSelector(e),s=o.argsArgArrayOrObject(e),f=s.args,d=s.keys,v=new n.Observable((function(e){var t=f.length;if(t)for(var r=new Array(t),n=t,o=t,u=function(t){var u=!1;i.innerFrom(f[t]).subscribe(a.createOperatorSubscriber(e,(function(e){u||(u=!0,o--),r[t]=e}),(function(){return n--}),void 0,(function(){n&&u||(o||e.next(d?l.createObject(d,r):r),e.complete())})))},c=0;c<t;c++)u(c);else e.complete()}));return r?v.pipe(c.mapOneOrManyArgs(r)):v}},5432:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.from=void 0;var n=r(5207),o=r(7103);t.from=function(e,t){return t?n.scheduled(e,t):o.innerFrom(e)}},3267:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u};Object.defineProperty(t,"__esModule",{value:!0}),t.fromEvent=void 0;var o=r(7103),i=r(2419),u=r(9475),a=r(3909),c=r(3005),l=r(1914),s=["addListener","removeListener"],f=["addEventListener","removeEventListener"],d=["on","off"];function v(e,t){return function(r){return function(n){return e[r](t,n)}}}t.fromEvent=function e(t,r,p,b){if(c.isFunction(p)&&(b=p,p=void 0),b)return e(t,r,p).pipe(l.mapOneOrManyArgs(b));var h=n(function(e){return c.isFunction(e.addEventListener)&&c.isFunction(e.removeEventListener)}(t)?f.map((function(e){return function(n){return t[e](r,n,p)}})):function(e){return c.isFunction(e.addListener)&&c.isFunction(e.removeListener)}(t)?s.map(v(t,r)):function(e){return c.isFunction(e.on)&&c.isFunction(e.off)}(t)?d.map(v(t,r)):[],2),y=h[0],m=h[1];if(!y&&a.isArrayLike(t))return u.mergeMap((function(t){return e(t,r,p)}))(o.innerFrom(t));if(!y)throw new TypeError("Invalid event target");return new i.Observable((function(e){var t=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.next(1<t.length?t:t[0])};return y(t),function(){return m(t)}}))}},470:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.fromEventPattern=void 0;var n=r(2419),o=r(3005),i=r(1914);t.fromEventPattern=function e(t,r,u){return u?e(t,r).pipe(i.mapOneOrManyArgs(u)):new n.Observable((function(e){var n=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.next(1===t.length?t[0]:t)},i=t(n);return o.isFunction(r)?function(){return r(n,i)}:void 0}))}},851:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.fromSubscribable=void 0;var n=r(2419);t.fromSubscribable=function(e){return new n.Observable((function(t){return e.subscribe(t)}))}},4303:function(e,t,r){var n=this&&this.__generator||function(e,t){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.generate=void 0;var o=r(4781),i=r(9016),u=r(7885),a=r(1297);t.generate=function(e,t,r,c,l){var s,f,d,v;function p(){var e;return n(this,(function(n){switch(n.label){case 0:e=v,n.label=1;case 1:return t&&!t(e)?[3,4]:[4,d(e)];case 2:n.sent(),n.label=3;case 3:return e=r(e),[3,1];case 4:return[2]}}))}return 1===arguments.length?(v=(s=e).initialState,t=s.condition,r=s.iterate,f=s.resultSelector,d=void 0===f?o.identity:f,l=s.scheduler):(v=e,!c||i.isScheduler(c)?(d=o.identity,l=c):d=c),u.defer(l?function(){return a.scheduleIterable(p(),l)}:p)}},1757:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.iif=void 0;var n=r(7885);t.iif=function(e,t,r){return n.defer((function(){return e()?t:r}))}},7103:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function u(e){try{c(n.next(e))}catch(e){i(e)}}function a(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(u,a)}c((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof u?u(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,o){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,o,(t=e[r](t)).done,t.value)}))}}},u=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.fromReadableStreamLike=t.fromAsyncIterable=t.fromIterable=t.fromPromise=t.fromArrayLike=t.fromInteropObservable=t.innerFrom=void 0;var a=r(3909),c=r(6018),l=r(2419),s=r(9500),f=r(9595),d=r(9906),v=r(2743),p=r(7823),b=r(3005),h=r(7968),y=r(2801);function m(e){return new l.Observable((function(t){var r=e[y.observable]();if(b.isFunction(r.subscribe))return r.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}))}function _(e){return new l.Observable((function(t){for(var r=0;r<e.length&&!t.closed;r++)t.next(e[r]);t.complete()}))}function g(e){return new l.Observable((function(t){e.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,h.reportUnhandledError)}))}function O(e){return new l.Observable((function(t){var r,n;try{for(var o=u(e),i=o.next();!i.done;i=o.next()){var a=i.value;if(t.next(a),t.closed)return}}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}t.complete()}))}function w(e){return new l.Observable((function(t){(function(e,t){var r,u,a,c;return n(this,void 0,void 0,(function(){var n,l;return o(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,11]),r=i(e),o.label=1;case 1:return[4,r.next()];case 2:if((u=o.sent()).done)return[3,4];if(n=u.value,t.next(n),t.closed)return[2];o.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=o.sent(),a={error:l},[3,11];case 6:return o.trys.push([6,,9,10]),u&&!u.done&&(c=r.return)?[4,c.call(r)]:[3,8];case 7:o.sent(),o.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))}))})(e,t).catch((function(e){return t.error(e)}))}))}function j(e){return w(p.readableStreamLikeToAsyncGenerator(e))}t.innerFrom=function(e){if(e instanceof l.Observable)return e;if(null!=e){if(s.isInteropObservable(e))return m(e);if(a.isArrayLike(e))return _(e);if(c.isPromise(e))return g(e);if(f.isAsyncIterable(e))return w(e);if(v.isIterable(e))return O(e);if(p.isReadableStreamLike(e))return j(e)}throw d.createInvalidObservableTypeError(e)},t.fromInteropObservable=m,t.fromArrayLike=_,t.fromPromise=g,t.fromIterable=O,t.fromAsyncIterable=w,t.fromReadableStreamLike=j},8990:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.interval=void 0;var n=r(2445),o=r(7513);t.interval=function(e,t){return void 0===e&&(e=0),void 0===t&&(t=n.asyncScheduler),e<0&&(e=0),o.timer(e,e,t)}},1846:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;var n=r(3783),o=r(7103),i=r(6332),u=r(2433),a=r(5432);t.merge=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=u.popScheduler(e),c=u.popNumber(e,1/0),l=e;return l.length?1===l.length?o.innerFrom(l[0]):n.mergeAll(c)(a.from(l,r)):i.EMPTY}},1339:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.never=t.NEVER=void 0;var n=r(2419),o=r(2576);t.NEVER=new n.Observable(o.noop),t.never=function(){return t.NEVER}},5726:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.of=void 0;var n=r(2433),o=r(5432);t.of=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=n.popScheduler(e);return o.from(e,r)}},724:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.onErrorResumeNext=void 0;var n=r(2419),o=r(5498),i=r(4990),u=r(2576),a=r(7103);t.onErrorResumeNext=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=o.argsOrArgArray(e);return new n.Observable((function(e){var t=0,n=function(){if(t<r.length){var o=void 0;try{o=a.innerFrom(r[t++])}catch(e){return void n()}var c=new i.OperatorSubscriber(e,void 0,u.noop,u.noop);o.subscribe(c),c.add(n)}else e.complete()};n()}))}},4380:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pairs=void 0;var n=r(5432);t.pairs=function(e,t){return n.from(Object.entries(e),t)}},7273:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.partition=void 0;var n=r(8634),o=r(9154),i=r(7103);t.partition=function(e,t,r){return[o.filter(t,r)(i.innerFrom(e)),o.filter(n.not(t,r))(i.innerFrom(e))]}},5182:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.raceInit=t.race=void 0;var n=r(2419),o=r(7103),i=r(5498),u=r(4990);function a(e){return function(t){for(var r=[],n=function(n){r.push(o.innerFrom(e[n]).subscribe(u.createOperatorSubscriber(t,(function(e){if(r){for(var o=0;o<r.length;o++)o!==n&&r[o].unsubscribe();r=null}t.next(e)}))))},i=0;r&&!t.closed&&i<e.length;i++)n(i)}}t.race=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 1===(e=i.argsOrArgArray(e)).length?o.innerFrom(e[0]):new n.Observable(a(e))},t.raceInit=a},322:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.range=void 0;var n=r(2419),o=r(6332);t.range=function(e,t,r){if(null==t&&(t=e,e=0),t<=0)return o.EMPTY;var i=t+e;return new n.Observable(r?function(t){var n=e;return r.schedule((function(){n<i?(t.next(n++),this.schedule()):t.complete()}))}:function(t){for(var r=e;r<i&&!t.closed;)t.next(r++);t.complete()})}},2098:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwError=void 0;var n=r(2419),o=r(3005);t.throwError=function(e,t){var r=o.isFunction(e)?e:function(){return e},i=function(e){return e.error(r())};return new n.Observable(t?function(e){return t.schedule(i,0,e)}:i)}},7513:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timer=void 0;var n=r(2419),o=r(2445),i=r(9016),u=r(1677);t.timer=function(e,t,r){void 0===e&&(e=0),void 0===r&&(r=o.async);var a=-1;return null!=t&&(i.isScheduler(t)?r=t:a=t),new n.Observable((function(t){var n=u.isValidDate(e)?+e-r.now():e;n<0&&(n=0);var o=0;return r.schedule((function(){t.closed||(t.next(o++),0<=a?this.schedule(void 0,a):t.complete())}),n)}))}},2962:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.using=void 0;var n=r(2419),o=r(7103),i=r(6332);t.using=function(e,t){return new n.Observable((function(r){var n=e(),u=t(n);return(u?o.innerFrom(u):i.EMPTY).subscribe(r),function(){n&&n.unsubscribe()}}))}},7654:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zip=void 0;var i=r(2419),u=r(7103),a=r(5498),c=r(6332),l=r(4990),s=r(2433);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=s.popResultSelector(e),f=a.argsOrArgArray(e);return f.length?new i.Observable((function(e){var t=f.map((function(){return[]})),i=f.map((function(){return!1}));e.add((function(){t=i=null}));for(var a=function(a){u.innerFrom(f[a]).subscribe(l.createOperatorSubscriber(e,(function(u){if(t[a].push(u),t.every((function(e){return e.length}))){var c=t.map((function(e){return e.shift()}));e.next(r?r.apply(void 0,o([],n(c))):c),t.some((function(e,t){return!e.length&&i[t]}))&&e.complete()}}),(function(){i[a]=!0,!t[a].length&&e.complete()})))},c=0;!e.closed&&c<f.length;c++)a(c);return function(){t=i=null}})):c.EMPTY}},4990:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.OperatorSubscriber=t.createOperatorSubscriber=void 0;var i=r(5125);t.createOperatorSubscriber=function(e,t,r,n,o){return new u(e,t,r,n,o)};var u=function(e){function t(t,r,n,o,i,u){var a=e.call(this,t)||this;return a.onFinalize=i,a.shouldUnsubscribe=u,a._next=r?function(e){try{r(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=n?function(){try{n()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return o(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;e.prototype.unsubscribe.call(this),!r&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(i.Subscriber);t.OperatorSubscriber=u},6474:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.audit=void 0;var n=r(4935),o=r(7103),i=r(4990);t.audit=function(e){return n.operate((function(t,r){var n=!1,u=null,a=null,c=!1,l=function(){if(null==a||a.unsubscribe(),a=null,n){n=!1;var e=u;u=null,r.next(e)}c&&r.complete()},s=function(){a=null,c&&r.complete()};t.subscribe(i.createOperatorSubscriber(r,(function(t){n=!0,u=t,a||o.innerFrom(e(t)).subscribe(a=i.createOperatorSubscriber(r,l,s))}),(function(){c=!0,(!n||!a||a.closed)&&r.complete()})))}))}},5382:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.auditTime=void 0;var n=r(2445),o=r(6474),i=r(7513);t.auditTime=function(e,t){return void 0===t&&(t=n.asyncScheduler),o.audit((function(){return i.timer(e,t)}))}},9715:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.buffer=void 0;var n=r(4935),o=r(2576),i=r(4990),u=r(7103);t.buffer=function(e){return n.operate((function(t,r){var n=[];return t.subscribe(i.createOperatorSubscriber(r,(function(e){return n.push(e)}),(function(){r.next(n),r.complete()}))),u.innerFrom(e).subscribe(i.createOperatorSubscriber(r,(function(){var e=n;n=[],r.next(e)}),o.noop)),function(){n=null}}))}},3814:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferCount=void 0;var o=r(4935),i=r(4990),u=r(6967);t.bufferCount=function(e,t){return void 0===t&&(t=null),t=null!=t?t:e,o.operate((function(r,o){var a=[],c=0;r.subscribe(i.createOperatorSubscriber(o,(function(r){var i,l,s,f,d=null;c++%t==0&&a.push([]);try{for(var v=n(a),p=v.next();!p.done;p=v.next())(y=p.value).push(r),e<=y.length&&(d=null!=d?d:[]).push(y)}catch(e){i={error:e}}finally{try{p&&!p.done&&(l=v.return)&&l.call(v)}finally{if(i)throw i.error}}if(d)try{for(var b=n(d),h=b.next();!h.done;h=b.next()){var y=h.value;u.arrRemove(a,y),o.next(y)}}catch(e){s={error:e}}finally{try{h&&!h.done&&(f=b.return)&&f.call(b)}finally{if(s)throw s.error}}}),(function(){var e,t;try{for(var r=n(a),i=r.next();!i.done;i=r.next()){var u=i.value;o.next(u)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}o.complete()}),void 0,(function(){a=null})))}))}},7211:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferTime=void 0;var o=r(3865),i=r(4935),u=r(4990),a=r(6967),c=r(2445),l=r(2433),s=r(7738);t.bufferTime=function(e){for(var t,r,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var v=null!==(t=l.popScheduler(f))&&void 0!==t?t:c.asyncScheduler,p=null!==(r=f[0])&&void 0!==r?r:null,b=f[1]||1/0;return i.operate((function(t,r){var i=[],c=!1,l=function(e){var t=e.buffer;e.subs.unsubscribe(),a.arrRemove(i,e),r.next(t),c&&f()},f=function(){if(i){var t=new o.Subscription;r.add(t);var n={buffer:[],subs:t};i.push(n),s.executeSchedule(t,v,(function(){return l(n)}),e)}};null!==p&&p>=0?s.executeSchedule(r,v,f,p,!0):c=!0,f();var d=u.createOperatorSubscriber(r,(function(e){var t,r,o=i.slice();try{for(var u=n(o),a=u.next();!a.done;a=u.next()){var c=a.value,s=c.buffer;s.push(e),b<=s.length&&l(c)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(r=u.return)&&r.call(u)}finally{if(t)throw t.error}}}),(function(){for(;null==i?void 0:i.length;)r.next(i.shift().buffer);null==d||d.unsubscribe(),r.complete(),r.unsubscribe()}),void 0,(function(){return i=null}));t.subscribe(d)}))}},4943:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferToggle=void 0;var o=r(3865),i=r(4935),u=r(7103),a=r(4990),c=r(2576),l=r(6967);t.bufferToggle=function(e,t){return i.operate((function(r,i){var s=[];u.innerFrom(e).subscribe(a.createOperatorSubscriber(i,(function(e){var r=[];s.push(r);var n=new o.Subscription;n.add(u.innerFrom(t(e)).subscribe(a.createOperatorSubscriber(i,(function(){l.arrRemove(s,r),i.next(r),n.unsubscribe()}),c.noop)))}),c.noop)),r.subscribe(a.createOperatorSubscriber(i,(function(e){var t,r;try{for(var o=n(s),i=o.next();!i.done;i=o.next())i.value.push(e)}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}}),(function(){for(;s.length>0;)i.next(s.shift());i.complete()})))}))}},1240:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bufferWhen=void 0;var n=r(4935),o=r(2576),i=r(4990),u=r(7103);t.bufferWhen=function(e){return n.operate((function(t,r){var n=null,a=null,c=function(){null==a||a.unsubscribe();var t=n;n=[],t&&r.next(t),u.innerFrom(e()).subscribe(a=i.createOperatorSubscriber(r,c,o.noop))};c(),t.subscribe(i.createOperatorSubscriber(r,(function(e){return null==n?void 0:n.push(e)}),(function(){n&&r.next(n),r.complete()}),void 0,(function(){return n=a=null})))}))}},9548:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.catchError=void 0;var n=r(7103),o=r(4990),i=r(4935);t.catchError=function e(t){return i.operate((function(r,i){var u,a=null,c=!1;a=r.subscribe(o.createOperatorSubscriber(i,void 0,void 0,(function(o){u=n.innerFrom(t(o,e(t)(r))),a?(a.unsubscribe(),a=null,u.subscribe(i)):c=!0}))),c&&(a.unsubscribe(),a=null,u.subscribe(i))}))}},2128:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineAll=void 0;var n=r(3240);t.combineAll=n.combineLatestAll},6318:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatest=void 0;var i=r(9258),u=r(4935),a=r(5498),c=r(1914),l=r(9985),s=r(2433);t.combineLatest=function e(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var f=s.popResultSelector(t);return f?l.pipe(e.apply(void 0,o([],n(t))),c.mapOneOrManyArgs(f)):u.operate((function(e,r){i.combineLatestInit(o([e],n(a.argsOrArgArray(t))))(r)}))}},3240:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestAll=void 0;var n=r(9258),o=r(2069);t.combineLatestAll=function(e){return o.joinAllInternals(n.combineLatest,e)}},5024:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestWith=void 0;var i=r(6318);t.combineLatestWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.combineLatest.apply(void 0,o([],n(e)))}},4919:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.concat=void 0;var i=r(4935),u=r(4413),a=r(2433),c=r(5432);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=a.popScheduler(e);return i.operate((function(t,i){u.concatAll()(c.from(o([t],n(e)),r)).subscribe(i)}))}},4413:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatAll=void 0;var n=r(3783);t.concatAll=function(){return n.mergeAll(1)}},7498:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatMap=void 0;var n=r(9475),o=r(3005);t.concatMap=function(e,t){return o.isFunction(t)?n.mergeMap(e,t,1):n.mergeMap(e,1)}},6109:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatMapTo=void 0;var n=r(7498),o=r(3005);t.concatMapTo=function(e,t){return o.isFunction(t)?n.concatMap((function(){return e}),t):n.concatMap((function(){return e}))}},9664:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.concatWith=void 0;var i=r(4919);t.concatWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.concat.apply(void 0,o([],n(e)))}},1995:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.connect=void 0;var n=r(3032),o=r(7103),i=r(4935),u=r(851),a={connector:function(){return new n.Subject}};t.connect=function(e,t){void 0===t&&(t=a);var r=t.connector;return i.operate((function(t,n){var i=r();o.innerFrom(e(u.fromSubscribable(i))).subscribe(n),n.add(t.subscribe(i))}))}},993:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.count=void 0;var n=r(122);t.count=function(e){return n.reduce((function(t,r,n){return!e||e(r,n)?t+1:t}),0)}},496:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=void 0;var n=r(4935),o=r(2576),i=r(4990),u=r(7103);t.debounce=function(e){return n.operate((function(t,r){var n=!1,a=null,c=null,l=function(){if(null==c||c.unsubscribe(),c=null,n){n=!1;var e=a;a=null,r.next(e)}};t.subscribe(i.createOperatorSubscriber(r,(function(t){null==c||c.unsubscribe(),n=!0,a=t,c=i.createOperatorSubscriber(r,l,o.noop),u.innerFrom(e(t)).subscribe(c)}),(function(){l(),r.complete()}),void 0,(function(){a=c=null})))}))}},1385:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounceTime=void 0;var n=r(2445),o=r(4935),i=r(4990);t.debounceTime=function(e,t){return void 0===t&&(t=n.asyncScheduler),o.operate((function(r,n){var o=null,u=null,a=null,c=function(){if(o){o.unsubscribe(),o=null;var e=u;u=null,n.next(e)}};function l(){var r=a+e,i=t.now();if(i<r)return o=this.schedule(void 0,r-i),void n.add(o);c()}r.subscribe(i.createOperatorSubscriber(n,(function(r){u=r,a=t.now(),o||(o=t.schedule(l,e),n.add(o))}),(function(){c(),n.complete()}),void 0,(function(){u=o=null})))}))}},1658:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultIfEmpty=void 0;var n=r(4935),o=r(4990);t.defaultIfEmpty=function(e){return n.operate((function(t,r){var n=!1;t.subscribe(o.createOperatorSubscriber(r,(function(e){n=!0,r.next(e)}),(function(){n||r.next(e),r.complete()})))}))}},5841:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delay=void 0;var n=r(2445),o=r(8798),i=r(7513);t.delay=function(e,t){void 0===t&&(t=n.asyncScheduler);var r=i.timer(e,t);return o.delayWhen((function(){return r}))}},8798:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delayWhen=void 0;var n=r(2239),o=r(4783),i=r(9438),u=r(8313),a=r(9475),c=r(7103);t.delayWhen=function e(t,r){return r?function(u){return n.concat(r.pipe(o.take(1),i.ignoreElements()),u.pipe(e(t)))}:a.mergeMap((function(e,r){return c.innerFrom(t(e,r)).pipe(o.take(1),u.mapTo(e))}))}},1080:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dematerialize=void 0;var n=r(3104),o=r(4935),i=r(4990);t.dematerialize=function(){return o.operate((function(e,t){e.subscribe(i.createOperatorSubscriber(t,(function(e){return n.observeNotification(e,t)})))}))}},3054:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinct=void 0;var n=r(4935),o=r(4990),i=r(2576),u=r(7103);t.distinct=function(e,t){return n.operate((function(r,n){var a=new Set;r.subscribe(o.createOperatorSubscriber(n,(function(t){var r=e?e(t):t;a.has(r)||(a.add(r),n.next(t))}))),t&&u.innerFrom(t).subscribe(o.createOperatorSubscriber(n,(function(){return a.clear()}),i.noop))}))}},8737:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinctUntilChanged=void 0;var n=r(4781),o=r(4935),i=r(4990);function u(e,t){return e===t}t.distinctUntilChanged=function(e,t){return void 0===t&&(t=n.identity),e=null!=e?e:u,o.operate((function(r,n){var o,u=!0;r.subscribe(i.createOperatorSubscriber(n,(function(r){var i=t(r);!u&&e(o,i)||(u=!1,o=i,n.next(r))})))}))}},7957:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinctUntilKeyChanged=void 0;var n=r(8737);t.distinctUntilKeyChanged=function(e,t){return n.distinctUntilChanged((function(r,n){return t?t(r[e],n[e]):r[e]===n[e]}))}},8633:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.elementAt=void 0;var n=r(2351),o=r(9154),i=r(1779),u=r(1658),a=r(4783);t.elementAt=function(e,t){if(e<0)throw new n.ArgumentOutOfRangeError;var r=arguments.length>=2;return function(c){return c.pipe(o.filter((function(t,r){return r===e})),a.take(1),r?u.defaultIfEmpty(t):i.throwIfEmpty((function(){return new n.ArgumentOutOfRangeError})))}}},911:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.endWith=void 0;var i=r(2239),u=r(5726);t.endWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return i.concat(t,u.of.apply(void 0,o([],n(e))))}}},2096:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.every=void 0;var n=r(4935),o=r(4990);t.every=function(e,t){return n.operate((function(r,n){var i=0;r.subscribe(o.createOperatorSubscriber(n,(function(o){e.call(t,o,i++,r)||(n.next(!1),n.complete())}),(function(){n.next(!0),n.complete()})))}))}},67:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaust=void 0;var n=r(5337);t.exhaust=n.exhaustAll},5337:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustAll=void 0;var n=r(5635),o=r(4781);t.exhaustAll=function(){return n.exhaustMap(o.identity)}},5635:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustMap=void 0;var n=r(7291),o=r(7103),i=r(4935),u=r(4990);t.exhaustMap=function e(t,r){return r?function(i){return i.pipe(e((function(e,i){return o.innerFrom(t(e,i)).pipe(n.map((function(t,n){return r(e,t,i,n)})))})))}:i.operate((function(e,r){var n=0,i=null,a=!1;e.subscribe(u.createOperatorSubscriber(r,(function(e){i||(i=u.createOperatorSubscriber(r,void 0,(function(){i=null,a&&r.complete()})),o.innerFrom(t(e,n++)).subscribe(i))}),(function(){a=!0,!i&&r.complete()})))}))}},9745:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.expand=void 0;var n=r(4935),o=r(7788);t.expand=function(e,t,r){return void 0===t&&(t=1/0),t=(t||0)<1?1/0:t,n.operate((function(n,i){return o.mergeInternals(n,i,e,t,void 0,!0,r)}))}},9154:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.filter=void 0;var n=r(4935),o=r(4990);t.filter=function(e,t){return n.operate((function(r,n){var i=0;r.subscribe(o.createOperatorSubscriber(n,(function(r){return e.call(t,r,i++)&&n.next(r)})))}))}},9283:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.finalize=void 0;var n=r(4935);t.finalize=function(e){return n.operate((function(t,r){try{t.subscribe(r)}finally{r.add(e)}}))}},7119:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createFind=t.find=void 0;var n=r(4935),o=r(4990);function i(e,t,r){var n="index"===r;return function(r,i){var u=0;r.subscribe(o.createOperatorSubscriber(i,(function(o){var a=u++;e.call(t,o,a,r)&&(i.next(n?a:o),i.complete())}),(function(){i.next(n?-1:void 0),i.complete()})))}}t.find=function(e,t){return n.operate(i(e,t,"value"))},t.createFind=i},4706:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.findIndex=void 0;var n=r(4935),o=r(7119);t.findIndex=function(e,t){return n.operate(o.createFind(e,t,"index"))}},9219:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.first=void 0;var n=r(9474),o=r(9154),i=r(4783),u=r(1658),a=r(1779),c=r(4781);t.first=function(e,t){var r=arguments.length>=2;return function(l){return l.pipe(e?o.filter((function(t,r){return e(t,r,l)})):c.identity,i.take(1),r?u.defaultIfEmpty(t):a.throwIfEmpty((function(){return new n.EmptyError})))}}},1788:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.flatMap=void 0;var n=r(9475);t.flatMap=n.mergeMap},9749:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.groupBy=void 0;var n=r(2419),o=r(7103),i=r(3032),u=r(4935),a=r(4990);t.groupBy=function(e,t,r,c){return u.operate((function(u,l){var s;t&&"function"!=typeof t?(r=t.duration,s=t.element,c=t.connector):s=t;var f=new Map,d=function(e){f.forEach(e),e(l)},v=function(e){return d((function(t){return t.error(e)}))},p=0,b=!1,h=new a.OperatorSubscriber(l,(function(t){try{var u=e(t),d=f.get(u);if(!d){f.set(u,d=c?c():new i.Subject);var y=(_=u,g=d,(O=new n.Observable((function(e){p++;var t=g.subscribe(e);return function(){t.unsubscribe(),0==--p&&b&&h.unsubscribe()}}))).key=_,O);if(l.next(y),r){var m=a.createOperatorSubscriber(d,(function(){d.complete(),null==m||m.unsubscribe()}),void 0,void 0,(function(){return f.delete(u)}));h.add(o.innerFrom(r(y)).subscribe(m))}}d.next(s?s(t):t)}catch(e){v(e)}var _,g,O}),(function(){return d((function(e){return e.complete()}))}),v,(function(){return f.clear()}),(function(){return b=!0,0===p}));u.subscribe(h)}))}},9438:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ignoreElements=void 0;var n=r(4935),o=r(4990),i=r(2576);t.ignoreElements=function(){return n.operate((function(e,t){e.subscribe(o.createOperatorSubscriber(t,i.noop))}))}},8515:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isEmpty=void 0;var n=r(4935),o=r(4990);t.isEmpty=function(){return n.operate((function(e,t){e.subscribe(o.createOperatorSubscriber(t,(function(){t.next(!1),t.complete()}),(function(){t.next(!0),t.complete()})))}))}},2069:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.joinAllInternals=void 0;var n=r(4781),o=r(1914),i=r(9985),u=r(9475),a=r(2);t.joinAllInternals=function(e,t){return i.pipe(a.toArray(),u.mergeMap((function(t){return e(t)})),t?o.mapOneOrManyArgs(t):n.identity)}},2435:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.last=void 0;var n=r(9474),o=r(9154),i=r(1980),u=r(1779),a=r(1658),c=r(4781);t.last=function(e,t){var r=arguments.length>=2;return function(l){return l.pipe(e?o.filter((function(t,r){return e(t,r,l)})):c.identity,i.takeLast(1),r?a.defaultIfEmpty(t):u.throwIfEmpty((function(){return new n.EmptyError})))}}},7291:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.map=void 0;var n=r(4935),o=r(4990);t.map=function(e,t){return n.operate((function(r,n){var i=0;r.subscribe(o.createOperatorSubscriber(n,(function(r){n.next(e.call(t,r,i++))})))}))}},8313:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mapTo=void 0;var n=r(7291);t.mapTo=function(e){return n.map((function(){return e}))}},3209:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.materialize=void 0;var n=r(3104),o=r(4935),i=r(4990);t.materialize=function(){return o.operate((function(e,t){e.subscribe(i.createOperatorSubscriber(t,(function(e){t.next(n.Notification.createNext(e))}),(function(){t.next(n.Notification.createComplete()),t.complete()}),(function(e){t.next(n.Notification.createError(e)),t.complete()})))}))}},2620:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.max=void 0;var n=r(122),o=r(3005);t.max=function(e){return n.reduce(o.isFunction(e)?function(t,r){return e(t,r)>0?t:r}:function(e,t){return e>t?e:t})}},9821:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;var i=r(4935),u=r(5498),a=r(3783),c=r(2433),l=r(5432);t.merge=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=c.popScheduler(e),s=c.popNumber(e,1/0);return e=u.argsOrArgArray(e),i.operate((function(t,i){a.mergeAll(s)(l.from(o([t],n(e)),r)).subscribe(i)}))}},3783:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeAll=void 0;var n=r(9475),o=r(4781);t.mergeAll=function(e){return void 0===e&&(e=1/0),n.mergeMap(o.identity,e)}},7788:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeInternals=void 0;var n=r(7103),o=r(7738),i=r(4990);t.mergeInternals=function(e,t,r,u,a,c,l,s){var f=[],d=0,v=0,p=!1,b=function(){!p||f.length||d||t.complete()},h=function(e){return d<u?y(e):f.push(e)},y=function(e){c&&t.next(e),d++;var s=!1;n.innerFrom(r(e,v++)).subscribe(i.createOperatorSubscriber(t,(function(e){null==a||a(e),c?h(e):t.next(e)}),(function(){s=!0}),void 0,(function(){if(s)try{d--;for(var e=function(){var e=f.shift();l?o.executeSchedule(t,l,(function(){return y(e)})):y(e)};f.length&&d<u;)e();b()}catch(e){t.error(e)}})))};return e.subscribe(i.createOperatorSubscriber(t,h,(function(){p=!0,b()}))),function(){null==s||s()}}},9475:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMap=void 0;var n=r(7291),o=r(7103),i=r(4935),u=r(7788),a=r(3005);t.mergeMap=function e(t,r,c){return void 0===c&&(c=1/0),a.isFunction(r)?e((function(e,i){return n.map((function(t,n){return r(e,t,i,n)}))(o.innerFrom(t(e,i)))}),c):("number"==typeof r&&(c=r),i.operate((function(e,r){return u.mergeInternals(e,r,t,c)})))}},1211:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMapTo=void 0;var n=r(9475),o=r(3005);t.mergeMapTo=function(e,t,r){return void 0===r&&(r=1/0),o.isFunction(t)?n.mergeMap((function(){return e}),t,r):("number"==typeof t&&(r=t),n.mergeMap((function(){return e}),r))}},7267:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeScan=void 0;var n=r(4935),o=r(7788);t.mergeScan=function(e,t,r){return void 0===r&&(r=1/0),n.operate((function(n,i){var u=t;return o.mergeInternals(n,i,(function(t,r){return e(u,t,r)}),r,(function(e){u=e}),!1,void 0,(function(){return u=null}))}))}},9303:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.mergeWith=void 0;var i=r(9821);t.mergeWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.merge.apply(void 0,o([],n(e)))}},9714:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.min=void 0;var n=r(122),o=r(3005);t.min=function(e){return n.reduce(o.isFunction(e)?function(t,r){return e(t,r)<0?t:r}:function(e,t){return e<t?e:t})}},3848:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.multicast=void 0;var n=r(9518),o=r(3005),i=r(1995);t.multicast=function(e,t){var r=o.isFunction(e)?e:function(){return e};return o.isFunction(t)?i.connect(t,{connector:r}):function(e){return new n.ConnectableObservable(e,r)}}},1184:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observeOn=void 0;var n=r(7738),o=r(4935),i=r(4990);t.observeOn=function(e,t){return void 0===t&&(t=0),o.operate((function(r,o){r.subscribe(i.createOperatorSubscriber(o,(function(r){return n.executeSchedule(o,e,(function(){return o.next(r)}),t)}),(function(){return n.executeSchedule(o,e,(function(){return o.complete()}),t)}),(function(r){return n.executeSchedule(o,e,(function(){return o.error(r)}),t)})))}))}},7582:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.onErrorResumeNext=t.onErrorResumeNextWith=void 0;var i=r(5498),u=r(724);function a(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=i.argsOrArgArray(e);return function(e){return u.onErrorResumeNext.apply(void 0,o([e],n(r)))}}t.onErrorResumeNextWith=a,t.onErrorResumeNext=a},2731:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pairwise=void 0;var n=r(4935),o=r(4990);t.pairwise=function(){return n.operate((function(e,t){var r,n=!1;e.subscribe(o.createOperatorSubscriber(t,(function(e){var o=r;r=e,n&&t.next([o,e]),n=!0})))}))}},4691:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pluck=void 0;var n=r(7291);t.pluck=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e.length;if(0===r)throw new Error("list of properties cannot be empty.");return n.map((function(t){for(var n=t,o=0;o<r;o++){var i=null==n?void 0:n[e[o]];if(void 0===i)return;n=i}return n}))}},4474:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publish=void 0;var n=r(3032),o=r(3848),i=r(1995);t.publish=function(e){return e?function(t){return i.connect(e)(t)}:function(e){return o.multicast(new n.Subject)(e)}}},52:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishBehavior=void 0;var n=r(5240),o=r(9518);t.publishBehavior=function(e){return function(t){var r=new n.BehaviorSubject(e);return new o.ConnectableObservable(t,(function(){return r}))}}},2110:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishLast=void 0;var n=r(280),o=r(9518);t.publishLast=function(){return function(e){var t=new n.AsyncSubject;return new o.ConnectableObservable(e,(function(){return t}))}}},9864:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishReplay=void 0;var n=r(3274),o=r(3848),i=r(3005);t.publishReplay=function(e,t,r,u){r&&!i.isFunction(r)&&(u=r);var a=i.isFunction(r)?r:void 0;return function(r){return o.multicast(new n.ReplaySubject(e,t,u),a)(r)}}},179:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.raceWith=void 0;var i=r(5182),u=r(4935),a=r(4781);t.raceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.length?u.operate((function(t,r){i.raceInit(o([t],n(e)))(r)})):a.identity}},122:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.reduce=void 0;var n=r(8345),o=r(4935);t.reduce=function(e,t){return o.operate(n.scanInternals(e,t,arguments.length>=2,!1,!0))}},8739:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.refCount=void 0;var n=r(4935),o=r(4990);t.refCount=function(){return n.operate((function(e,t){var r=null;e._refCount++;var n=o.createOperatorSubscriber(t,void 0,void 0,void 0,(function(){if(!e||e._refCount<=0||0<--e._refCount)r=null;else{var n=e._connection,o=r;r=null,!n||o&&n!==o||n.unsubscribe(),t.unsubscribe()}}));e.subscribe(n),n.closed||(r=e.connect())}))}},5313:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.repeat=void 0;var n=r(6332),o=r(4935),i=r(4990),u=r(7103),a=r(7513);t.repeat=function(e){var t,r,c=1/0;return null!=e&&("object"==typeof e?(t=e.count,c=void 0===t?1/0:t,r=e.delay):c=e),c<=0?function(){return n.EMPTY}:o.operate((function(e,t){var n,o=0,l=function(){if(null==n||n.unsubscribe(),n=null,null!=r){var e="number"==typeof r?a.timer(r):u.innerFrom(r(o)),c=i.createOperatorSubscriber(t,(function(){c.unsubscribe(),s()}));e.subscribe(c)}else s()},s=function(){var r=!1;n=e.subscribe(i.createOperatorSubscriber(t,void 0,(function(){++o<c?n?l():r=!0:t.complete()}))),r&&l()};s()}))}},4068:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.repeatWhen=void 0;var n=r(7103),o=r(3032),i=r(4935),u=r(4990);t.repeatWhen=function(e){return i.operate((function(t,r){var i,a,c=!1,l=!1,s=!1,f=function(){return s&&l&&(r.complete(),!0)},d=function(){s=!1,i=t.subscribe(u.createOperatorSubscriber(r,void 0,(function(){s=!0,!f()&&(a||(a=new o.Subject,n.innerFrom(e(a)).subscribe(u.createOperatorSubscriber(r,(function(){i?d():c=!0}),(function(){l=!0,f()})))),a).next()}))),c&&(i.unsubscribe(),i=null,c=!1,d())};d()}))}},64:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.retry=void 0;var n=r(4935),o=r(4990),i=r(4781),u=r(7513),a=r(7103);t.retry=function(e){var t;void 0===e&&(e=1/0);var r=(t=e&&"object"==typeof e?e:{count:e}).count,c=void 0===r?1/0:r,l=t.delay,s=t.resetOnSuccess,f=void 0!==s&&s;return c<=0?i.identity:n.operate((function(e,t){var r,n=0,i=function(){var s=!1;r=e.subscribe(o.createOperatorSubscriber(t,(function(e){f&&(n=0),t.next(e)}),void 0,(function(e){if(n++<c){var f=function(){r?(r.unsubscribe(),r=null,i()):s=!0};if(null!=l){var d="number"==typeof l?u.timer(l):a.innerFrom(l(e,n)),v=o.createOperatorSubscriber(t,(function(){v.unsubscribe(),f()}),(function(){t.complete()}));d.subscribe(v)}else f()}else t.error(e)}))),s&&(r.unsubscribe(),r=null,i())};i()}))}},1188:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.retryWhen=void 0;var n=r(7103),o=r(3032),i=r(4935),u=r(4990);t.retryWhen=function(e){return i.operate((function(t,r){var i,a,c=!1,l=function(){i=t.subscribe(u.createOperatorSubscriber(r,void 0,void 0,(function(t){a||(a=new o.Subject,n.innerFrom(e(a)).subscribe(u.createOperatorSubscriber(r,(function(){return i?l():c=!0})))),a&&a.next(t)}))),c&&(i.unsubscribe(),i=null,c=!1,l())};l()}))}},4193:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sample=void 0;var n=r(7103),o=r(4935),i=r(2576),u=r(4990);t.sample=function(e){return o.operate((function(t,r){var o=!1,a=null;t.subscribe(u.createOperatorSubscriber(r,(function(e){o=!0,a=e}))),n.innerFrom(e).subscribe(u.createOperatorSubscriber(r,(function(){if(o){o=!1;var e=a;a=null,r.next(e)}}),i.noop))}))}},6170:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sampleTime=void 0;var n=r(2445),o=r(4193),i=r(8990);t.sampleTime=function(e,t){return void 0===t&&(t=n.asyncScheduler),o.sample(i.interval(e,t))}},5876:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scan=void 0;var n=r(4935),o=r(8345);t.scan=function(e,t){return n.operate(o.scanInternals(e,t,arguments.length>=2,!0))}},8345:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scanInternals=void 0;var n=r(4990);t.scanInternals=function(e,t,r,o,i){return function(u,a){var c=r,l=t,s=0;u.subscribe(n.createOperatorSubscriber(a,(function(t){var r=s++;l=c?e(l,t,r):(c=!0,t),o&&a.next(l)}),i&&function(){c&&a.next(l),a.complete()}))}}},1791:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sequenceEqual=void 0;var n=r(4935),o=r(4990),i=r(7103);t.sequenceEqual=function(e,t){return void 0===t&&(t=function(e,t){return e===t}),n.operate((function(r,n){var u={buffer:[],complete:!1},a={buffer:[],complete:!1},c=function(e){n.next(e),n.complete()},l=function(e,r){var i=o.createOperatorSubscriber(n,(function(n){var o=r.buffer,i=r.complete;0===o.length?i?c(!1):e.buffer.push(n):!t(n,o.shift())&&c(!1)}),(function(){e.complete=!0;var t=r.complete,n=r.buffer;t&&c(0===n.length),null==i||i.unsubscribe()}));return i};r.subscribe(l(u,a)),i.innerFrom(e).subscribe(l(a,u))}))}},5137:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.share=void 0;var i=r(7103),u=r(3032),a=r(5125),c=r(4935);function l(e,t){for(var r=[],u=2;u<arguments.length;u++)r[u-2]=arguments[u];if(!0!==t){if(!1!==t){var c=new a.SafeSubscriber({next:function(){c.unsubscribe(),e()}});return i.innerFrom(t.apply(void 0,o([],n(r)))).subscribe(c)}}else e()}t.share=function(e){void 0===e&&(e={});var t=e.connector,r=void 0===t?function(){return new u.Subject}:t,n=e.resetOnError,o=void 0===n||n,s=e.resetOnComplete,f=void 0===s||s,d=e.resetOnRefCountZero,v=void 0===d||d;return function(e){var t,n,u,s=0,d=!1,p=!1,b=function(){null==n||n.unsubscribe(),n=void 0},h=function(){b(),t=u=void 0,d=p=!1},y=function(){var e=t;h(),null==e||e.unsubscribe()};return c.operate((function(e,c){s++,p||d||b();var m=u=null!=u?u:r();c.add((function(){0!=--s||p||d||(n=l(y,v))})),m.subscribe(c),!t&&s>0&&(t=new a.SafeSubscriber({next:function(e){return m.next(e)},error:function(e){p=!0,b(),n=l(h,o,e),m.error(e)},complete:function(){d=!0,b(),n=l(h,f),m.complete()}}),i.innerFrom(e).subscribe(t))}))(e)}}},1348:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.shareReplay=void 0;var n=r(3274),o=r(5137);t.shareReplay=function(e,t,r){var i,u,a,c,l=!1;return e&&"object"==typeof e?(i=e.bufferSize,c=void 0===i?1/0:i,u=e.windowTime,t=void 0===u?1/0:u,l=void 0!==(a=e.refCount)&&a,r=e.scheduler):c=null!=e?e:1/0,o.share({connector:function(){return new n.ReplaySubject(c,t,r)},resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:l})}},8242:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.single=void 0;var n=r(9474),o=r(6156),i=r(8598),u=r(4935),a=r(4990);t.single=function(e){return u.operate((function(t,r){var u,c=!1,l=!1,s=0;t.subscribe(a.createOperatorSubscriber(r,(function(n){l=!0,e&&!e(n,s++,t)||(c&&r.error(new o.SequenceError("Too many matching values")),c=!0,u=n)}),(function(){c?(r.next(u),r.complete()):r.error(l?new i.NotFoundError("No matching values"):new n.EmptyError)})))}))}},3169:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skip=void 0;var n=r(9154);t.skip=function(e){return n.filter((function(t,r){return e<=r}))}},2454:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipLast=void 0;var n=r(4781),o=r(4935),i=r(4990);t.skipLast=function(e){return e<=0?n.identity:o.operate((function(t,r){var n=new Array(e),o=0;return t.subscribe(i.createOperatorSubscriber(r,(function(t){var i=o++;if(i<e)n[i]=t;else{var u=i%e,a=n[u];n[u]=t,r.next(a)}}))),function(){n=null}}))}},6931:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipUntil=void 0;var n=r(4935),o=r(4990),i=r(7103),u=r(2576);t.skipUntil=function(e){return n.operate((function(t,r){var n=!1,a=o.createOperatorSubscriber(r,(function(){null==a||a.unsubscribe(),n=!0}),u.noop);i.innerFrom(e).subscribe(a),t.subscribe(o.createOperatorSubscriber(r,(function(e){return n&&r.next(e)})))}))}},7913:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipWhile=void 0;var n=r(4935),o=r(4990);t.skipWhile=function(e){return n.operate((function(t,r){var n=!1,i=0;t.subscribe(o.createOperatorSubscriber(r,(function(t){return(n||(n=!e(t,i++)))&&r.next(t)})))}))}},9234:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.startWith=void 0;var n=r(2239),o=r(2433),i=r(4935);t.startWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=o.popScheduler(e);return i.operate((function(t,o){(r?n.concat(e,t,r):n.concat(e,t)).subscribe(o)}))}},276:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subscribeOn=void 0;var n=r(4935);t.subscribeOn=function(e,t){return void 0===t&&(t=0),n.operate((function(r,n){n.add(e.schedule((function(){return r.subscribe(n)}),t))}))}},9253:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchAll=void 0;var n=r(8518),o=r(4781);t.switchAll=function(){return n.switchMap(o.identity)}},8518:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchMap=void 0;var n=r(7103),o=r(4935),i=r(4990);t.switchMap=function(e,t){return o.operate((function(r,o){var u=null,a=0,c=!1,l=function(){return c&&!u&&o.complete()};r.subscribe(i.createOperatorSubscriber(o,(function(r){null==u||u.unsubscribe();var c=0,s=a++;n.innerFrom(e(r,s)).subscribe(u=i.createOperatorSubscriber(o,(function(e){return o.next(t?t(r,e,s,c++):e)}),(function(){u=null,l()})))}),(function(){c=!0,l()})))}))}},1173:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchMapTo=void 0;var n=r(8518),o=r(3005);t.switchMapTo=function(e,t){return o.isFunction(t)?n.switchMap((function(){return e}),t):n.switchMap((function(){return e}))}},3855:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchScan=void 0;var n=r(8518),o=r(4935);t.switchScan=function(e,t){return o.operate((function(r,o){var i=t;return n.switchMap((function(t,r){return e(i,t,r)}),(function(e,t){return i=t,t}))(r).subscribe(o),function(){i=null}}))}},4783:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.take=void 0;var n=r(6332),o=r(4935),i=r(4990);t.take=function(e){return e<=0?function(){return n.EMPTY}:o.operate((function(t,r){var n=0;t.subscribe(i.createOperatorSubscriber(r,(function(t){++n<=e&&(r.next(t),e<=n&&r.complete())})))}))}},1980:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.takeLast=void 0;var o=r(6332),i=r(4935),u=r(4990);t.takeLast=function(e){return e<=0?function(){return o.EMPTY}:i.operate((function(t,r){var o=[];t.subscribe(u.createOperatorSubscriber(r,(function(t){o.push(t),e<o.length&&o.shift()}),(function(){var e,t;try{for(var i=n(o),u=i.next();!u.done;u=i.next()){var a=u.value;r.next(a)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}r.complete()}),void 0,(function(){o=null})))}))}},9845:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.takeUntil=void 0;var n=r(4935),o=r(4990),i=r(7103),u=r(2576);t.takeUntil=function(e){return n.operate((function(t,r){i.innerFrom(e).subscribe(o.createOperatorSubscriber(r,(function(){return r.complete()}),u.noop)),!r.closed&&t.subscribe(r)}))}},6060:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.takeWhile=void 0;var n=r(4935),o=r(4990);t.takeWhile=function(e,t){return void 0===t&&(t=!1),n.operate((function(r,n){var i=0;r.subscribe(o.createOperatorSubscriber(n,(function(r){var o=e(r,i++);(o||t)&&n.next(r),!o&&n.complete()})))}))}},1138:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tap=void 0;var n=r(3005),o=r(4935),i=r(4990),u=r(4781);t.tap=function(e,t,r){var a=n.isFunction(e)||t||r?{next:e,error:t,complete:r}:e;return a?o.operate((function(e,t){var r;null===(r=a.subscribe)||void 0===r||r.call(a);var n=!0;e.subscribe(i.createOperatorSubscriber(t,(function(e){var r;null===(r=a.next)||void 0===r||r.call(a,e),t.next(e)}),(function(){var e;n=!1,null===(e=a.complete)||void 0===e||e.call(a),t.complete()}),(function(e){var r;n=!1,null===(r=a.error)||void 0===r||r.call(a,e),t.error(e)}),(function(){var e,t;n&&(null===(e=a.unsubscribe)||void 0===e||e.call(a)),null===(t=a.finalize)||void 0===t||t.call(a)})))})):u.identity}},7306:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throttle=t.defaultThrottleConfig=void 0;var n=r(4935),o=r(4990),i=r(7103);t.defaultThrottleConfig={leading:!0,trailing:!1},t.throttle=function(e,r){return void 0===r&&(r=t.defaultThrottleConfig),n.operate((function(t,n){var u=r.leading,a=r.trailing,c=!1,l=null,s=null,f=!1,d=function(){null==s||s.unsubscribe(),s=null,a&&(b(),f&&n.complete())},v=function(){s=null,f&&n.complete()},p=function(t){return s=i.innerFrom(e(t)).subscribe(o.createOperatorSubscriber(n,d,v))},b=function(){if(c){c=!1;var e=l;l=null,n.next(e),!f&&p(e)}};t.subscribe(o.createOperatorSubscriber(n,(function(e){c=!0,l=e,(!s||s.closed)&&(u?b():p(e))}),(function(){f=!0,(!(a&&c&&s)||s.closed)&&n.complete()})))}))}},8968:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throttleTime=void 0;var n=r(2445),o=r(7306),i=r(7513);t.throttleTime=function(e,t,r){void 0===t&&(t=n.asyncScheduler),void 0===r&&(r=o.defaultThrottleConfig);var u=i.timer(e,t);return o.throttle((function(){return u}),r)}},1779:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwIfEmpty=void 0;var n=r(9474),o=r(4935),i=r(4990);function u(){return new n.EmptyError}t.throwIfEmpty=function(e){return void 0===e&&(e=u),o.operate((function(t,r){var n=!1;t.subscribe(i.createOperatorSubscriber(r,(function(e){n=!0,r.next(e)}),(function(){return n?r.complete():r.error(e())})))}))}},8005:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TimeInterval=t.timeInterval=void 0;var n=r(2445),o=r(4935),i=r(4990);t.timeInterval=function(e){return void 0===e&&(e=n.asyncScheduler),o.operate((function(t,r){var n=e.now();t.subscribe(i.createOperatorSubscriber(r,(function(t){var o=e.now(),i=o-n;n=o,r.next(new u(t,i))})))}))};var u=function(e,t){this.value=e,this.interval=t};t.TimeInterval=u},4173:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timeout=t.TimeoutError=void 0;var n=r(2445),o=r(1677),i=r(4935),u=r(7103),a=r(7029),c=r(4990),l=r(7738);function s(e){throw new t.TimeoutError(e)}t.TimeoutError=a.createErrorClass((function(e){return function(t){void 0===t&&(t=null),e(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=t}})),t.timeout=function(e,t){var r=o.isValidDate(e)?{first:e}:"number"==typeof e?{each:e}:e,a=r.first,f=r.each,d=r.with,v=void 0===d?s:d,p=r.scheduler,b=void 0===p?null!=t?t:n.asyncScheduler:p,h=r.meta,y=void 0===h?null:h;if(null==a&&null==f)throw new TypeError("No timeout provided.");return i.operate((function(e,t){var r,n,o=null,i=0,s=function(e){n=l.executeSchedule(t,b,(function(){try{r.unsubscribe(),u.innerFrom(v({meta:y,lastValue:o,seen:i})).subscribe(t)}catch(e){t.error(e)}}),e)};r=e.subscribe(c.createOperatorSubscriber(t,(function(e){null==n||n.unsubscribe(),i++,t.next(o=e),f>0&&s(f)}),void 0,void 0,(function(){(null==n?void 0:n.closed)||null==n||n.unsubscribe(),o=null}))),!i&&s(null!=a?"number"==typeof a?a:+a-b.now():f)}))}},7223:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timeoutWith=void 0;var n=r(2445),o=r(1677),i=r(4173);t.timeoutWith=function(e,t,r){var u,a,c;if(r=null!=r?r:n.async,o.isValidDate(e)?u=e:"number"==typeof e&&(a=e),!t)throw new TypeError("No observable provided to switch to");if(c=function(){return t},null==u&&null==a)throw new TypeError("No timeout provided.");return i.timeout({first:u,each:a,scheduler:r,with:c})}},8975:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timestamp=void 0;var n=r(7950),o=r(7291);t.timestamp=function(e){return void 0===e&&(e=n.dateTimestampProvider),o.map((function(t){return{value:t,timestamp:e.now()}}))}},2:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.toArray=void 0;var n=r(122),o=r(4935),i=function(e,t){return e.push(t),e};t.toArray=function(){return o.operate((function(e,t){n.reduce(i,[])(e).subscribe(t)}))}},2826:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.window=void 0;var n=r(3032),o=r(4935),i=r(4990),u=r(2576),a=r(7103);t.window=function(e){return o.operate((function(t,r){var o=new n.Subject;r.next(o.asObservable());var c=function(e){o.error(e),r.error(e)};return t.subscribe(i.createOperatorSubscriber(r,(function(e){return null==o?void 0:o.next(e)}),(function(){o.complete(),r.complete()}),c)),a.innerFrom(e).subscribe(i.createOperatorSubscriber(r,(function(){o.complete(),r.next(o=new n.Subject)}),u.noop,c)),function(){null==o||o.unsubscribe(),o=null}}))}},7526:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.windowCount=void 0;var o=r(3032),i=r(4935),u=r(4990);t.windowCount=function(e,t){void 0===t&&(t=0);var r=t>0?t:e;return i.operate((function(t,i){var a=[new o.Subject],c=0;i.next(a[0].asObservable()),t.subscribe(u.createOperatorSubscriber(i,(function(t){var u,l;try{for(var s=n(a),f=s.next();!f.done;f=s.next())f.value.next(t)}catch(e){u={error:e}}finally{try{f&&!f.done&&(l=s.return)&&l.call(s)}finally{if(u)throw u.error}}var d=c-e+1;if(d>=0&&d%r==0&&a.shift().complete(),++c%r==0){var v=new o.Subject;a.push(v),i.next(v.asObservable())}}),(function(){for(;a.length>0;)a.shift().complete();i.complete()}),(function(e){for(;a.length>0;)a.shift().error(e);i.error(e)}),(function(){a=null})))}))}},8294:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.windowTime=void 0;var n=r(3032),o=r(2445),i=r(3865),u=r(4935),a=r(4990),c=r(6967),l=r(2433),s=r(7738);t.windowTime=function(e){for(var t,r,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var v=null!==(t=l.popScheduler(f))&&void 0!==t?t:o.asyncScheduler,p=null!==(r=f[0])&&void 0!==r?r:null,b=f[1]||1/0;return u.operate((function(t,r){var o=[],u=!1,l=function(e){var t=e.window,r=e.subs;t.complete(),r.unsubscribe(),c.arrRemove(o,e),u&&f()},f=function(){if(o){var t=new i.Subscription;r.add(t);var u=new n.Subject,a={window:u,subs:t,seen:0};o.push(a),r.next(u.asObservable()),s.executeSchedule(t,v,(function(){return l(a)}),e)}};null!==p&&p>=0?s.executeSchedule(r,v,f,p,!0):u=!0,f();var d=function(e){return o.slice().forEach(e)},h=function(e){d((function(t){var r=t.window;return e(r)})),e(r),r.unsubscribe()};return t.subscribe(a.createOperatorSubscriber(r,(function(e){d((function(t){t.window.next(e),b<=++t.seen&&l(t)}))}),(function(){return h((function(e){return e.complete()}))}),(function(e){return h((function(t){return t.error(e)}))}))),function(){o=null}}))}},1883:function(e,t,r){var n=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.windowToggle=void 0;var o=r(3032),i=r(3865),u=r(4935),a=r(7103),c=r(4990),l=r(2576),s=r(6967);t.windowToggle=function(e,t){return u.operate((function(r,u){var f=[],d=function(e){for(;0<f.length;)f.shift().error(e);u.error(e)};a.innerFrom(e).subscribe(c.createOperatorSubscriber(u,(function(e){var r=new o.Subject;f.push(r);var n,v=new i.Subscription;try{n=a.innerFrom(t(e))}catch(e){return void d(e)}u.next(r.asObservable()),v.add(n.subscribe(c.createOperatorSubscriber(u,(function(){s.arrRemove(f,r),r.complete(),v.unsubscribe()}),l.noop,d)))}),l.noop)),r.subscribe(c.createOperatorSubscriber(u,(function(e){var t,r,o=f.slice();try{for(var i=n(o),u=i.next();!u.done;u=i.next())u.value.next(e)}catch(e){t={error:e}}finally{try{u&&!u.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}}),(function(){for(;0<f.length;)f.shift().complete();u.complete()}),d,(function(){for(;0<f.length;)f.shift().unsubscribe()})))}))}},4309:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.windowWhen=void 0;var n=r(3032),o=r(4935),i=r(4990),u=r(7103);t.windowWhen=function(e){return o.operate((function(t,r){var o,a,c=function(e){o.error(e),r.error(e)},l=function(){var t;null==a||a.unsubscribe(),null==o||o.complete(),o=new n.Subject,r.next(o.asObservable());try{t=u.innerFrom(e())}catch(e){return void c(e)}t.subscribe(a=i.createOperatorSubscriber(r,l,l,c))};l(),t.subscribe(i.createOperatorSubscriber(r,(function(e){return o.next(e)}),(function(){o.complete(),r.complete()}),c,(function(){null==a||a.unsubscribe(),o=null})))}))}},3041:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.withLatestFrom=void 0;var i=r(4935),u=r(4990),a=r(7103),c=r(4781),l=r(2576),s=r(2433);t.withLatestFrom=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=s.popResultSelector(e);return i.operate((function(t,i){for(var s=e.length,f=new Array(s),d=e.map((function(){return!1})),v=!1,p=function(t){a.innerFrom(e[t]).subscribe(u.createOperatorSubscriber(i,(function(e){f[t]=e,v||d[t]||(d[t]=!0,(v=d.every(c.identity))&&(d=null))}),l.noop))},b=0;b<s;b++)p(b);t.subscribe(u.createOperatorSubscriber(i,(function(e){if(v){var t=o([e],n(f));i.next(r?r.apply(void 0,o([],n(t))):t)}})))}))}},4400:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zip=void 0;var i=r(7654),u=r(4935);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return u.operate((function(t,r){i.zip.apply(void 0,o([t],n(e))).subscribe(r)}))}},8593:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.zipAll=void 0;var n=r(7654),o=r(2069);t.zipAll=function(e){return o.joinAllInternals(n.zip,e)}},8096:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zipWith=void 0;var i=r(4400);t.zipWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.zip.apply(void 0,o([],n(e)))}},7631:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleArray=void 0;var n=r(2419);t.scheduleArray=function(e,t){return new n.Observable((function(r){var n=0;return t.schedule((function(){n===e.length?r.complete():(r.next(e[n++]),r.closed||this.schedule())}))}))}},8489:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleAsyncIterable=void 0;var n=r(2419),o=r(7738);t.scheduleAsyncIterable=function(e,t){if(!e)throw new Error("Iterable cannot be null");return new n.Observable((function(r){o.executeSchedule(r,t,(function(){var n=e[Symbol.asyncIterator]();o.executeSchedule(r,t,(function(){n.next().then((function(e){e.done?r.complete():r.next(e.value)}))}),0,!0)}))}))}},1297:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleIterable=void 0;var n=r(2419),o=r(3725),i=r(3005),u=r(7738);t.scheduleIterable=function(e,t){return new n.Observable((function(r){var n;return u.executeSchedule(r,t,(function(){n=e[o.iterator](),u.executeSchedule(r,t,(function(){var e,t,o;try{t=(e=n.next()).value,o=e.done}catch(e){return void r.error(e)}o?r.complete():r.next(t)}),0,!0)})),function(){return i.isFunction(null==n?void 0:n.return)&&n.return()}}))}},4001:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleObservable=void 0;var n=r(7103),o=r(1184),i=r(276);t.scheduleObservable=function(e,t){return n.innerFrom(e).pipe(i.subscribeOn(t),o.observeOn(t))}},5143:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.schedulePromise=void 0;var n=r(7103),o=r(1184),i=r(276);t.schedulePromise=function(e,t){return n.innerFrom(e).pipe(i.subscribeOn(t),o.observeOn(t))}},3676:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleReadableStreamLike=void 0;var n=r(8489),o=r(7823);t.scheduleReadableStreamLike=function(e,t){return n.scheduleAsyncIterable(o.readableStreamLikeToAsyncGenerator(e),t)}},5207:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduled=void 0;var n=r(4001),o=r(5143),i=r(7631),u=r(1297),a=r(8489),c=r(9500),l=r(6018),s=r(3909),f=r(2743),d=r(9595),v=r(9906),p=r(7823),b=r(3676);t.scheduled=function(e,t){if(null!=e){if(c.isInteropObservable(e))return n.scheduleObservable(e,t);if(s.isArrayLike(e))return i.scheduleArray(e,t);if(l.isPromise(e))return o.schedulePromise(e,t);if(d.isAsyncIterable(e))return a.scheduleAsyncIterable(e,t);if(f.isIterable(e))return u.scheduleIterable(e,t);if(p.isReadableStreamLike(e))return b.scheduleReadableStreamLike(e,t)}throw v.createInvalidObservableTypeError(e)}},1986:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Action=void 0;var i=function(e){function t(t,r){return e.call(this)||this}return o(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(r(3865).Subscription);t.Action=i},7574:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AnimationFrameAction=void 0;var i=r(9702),u=r(505),a=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return o(t,e),t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t._scheduled||(t._scheduled=u.animationFrameProvider.requestAnimationFrame((function(){return t.flush(void 0)}))))},t.prototype.recycleAsyncId=function(t,r,n){var o;if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);var i=t.actions;null!=r&&(null===(o=i[i.length-1])||void 0===o?void 0:o.id)!==r&&(u.animationFrameProvider.cancelAnimationFrame(r),t._scheduled=void 0)},t}(i.AsyncAction);t.AnimationFrameAction=a},2934:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AnimationFrameScheduler=void 0;var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.flush=function(e){this._active=!0;var t=this._scheduled;this._scheduled=void 0;var r,n=this.actions;e=e||n.shift();do{if(r=e.execute(e.state,e.delay))break}while((e=n[0])&&e.id===t&&n.shift());if(this._active=!1,r){for(;(e=n[0])&&e.id===t&&n.shift();)e.unsubscribe();throw r}},t}(r(3643).AsyncScheduler);t.AnimationFrameScheduler=i},2189:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsapAction=void 0;var i=r(9702),u=r(8908),a=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return o(t,e),t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!==n&&n>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t._scheduled||(t._scheduled=u.immediateProvider.setImmediate(t.flush.bind(t,void 0))))},t.prototype.recycleAsyncId=function(t,r,n){var o;if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);var i=t.actions;null!=r&&(null===(o=i[i.length-1])||void 0===o?void 0:o.id)!==r&&(u.immediateProvider.clearImmediate(r),t._scheduled=void 0)},t}(i.AsyncAction);t.AsapAction=a},5523:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsapScheduler=void 0;var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.flush=function(e){this._active=!0;var t=this._scheduled;this._scheduled=void 0;var r,n=this.actions;e=e||n.shift();do{if(r=e.execute(e.state,e.delay))break}while((e=n[0])&&e.id===t&&n.shift());if(this._active=!1,r){for(;(e=n[0])&&e.id===t&&n.shift();)e.unsubscribe();throw r}},t}(r(3643).AsyncScheduler);t.AsapScheduler=i},9702:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncAction=void 0;var i=r(1986),u=r(8203),a=r(6967),c=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n.pending=!1,n}return o(t,e),t.prototype.schedule=function(e,t){var r;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var n=this.id,o=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(o,n,t)),this.pending=!0,this.delay=t,this.id=null!==(r=this.id)&&void 0!==r?r:this.requestAsyncId(o,this.id,t),this},t.prototype.requestAsyncId=function(e,t,r){return void 0===r&&(r=0),u.intervalProvider.setInterval(e.flush.bind(e,this),r)},t.prototype.recycleAsyncId=function(e,t,r){if(void 0===r&&(r=0),null!=r&&this.delay===r&&!1===this.pending)return t;null!=t&&u.intervalProvider.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(e,t);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var r,n=!1;try{this.work(e)}catch(e){n=!0,r=e||new Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),r},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,r=this.scheduler,n=r.actions;this.work=this.state=this.scheduler=null,this.pending=!1,a.arrRemove(n,this),null!=t&&(this.id=this.recycleAsyncId(r,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(i.Action);t.AsyncAction=c},3643:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncScheduler=void 0;var i=r(218),u=function(e){function t(t,r){void 0===r&&(r=i.Scheduler.now);var n=e.call(this,t,r)||this;return n.actions=[],n._active=!1,n}return o(t,e),t.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var r;this._active=!0;do{if(r=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,r){for(;e=t.shift();)e.unsubscribe();throw r}}},t}(i.Scheduler);t.AsyncScheduler=u},6201:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.QueueAction=void 0;var i=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return o(t,e),t.prototype.schedule=function(t,r){return void 0===r&&(r=0),r>0?e.prototype.schedule.call(this,t,r):(this.delay=r,this.state=t,this.scheduler.flush(this),this)},t.prototype.execute=function(t,r){return r>0||this.closed?e.prototype.execute.call(this,t,r):this._execute(t,r)},t.prototype.requestAsyncId=function(t,r,n){return void 0===n&&(n=0),null!=n&&n>0||null==n&&this.delay>0?e.prototype.requestAsyncId.call(this,t,r,n):(t.flush(this),0)},t}(r(9702).AsyncAction);t.QueueAction=i},5860:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.QueueScheduler=void 0;var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t}(r(3643).AsyncScheduler);t.QueueScheduler=i},4123:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.VirtualAction=t.VirtualTimeScheduler=void 0;var i=r(9702),u=r(3865),a=function(e){function t(t,r){void 0===t&&(t=c),void 0===r&&(r=1/0);var n=e.call(this,t,(function(){return n.frame}))||this;return n.maxFrames=r,n.frame=0,n.index=-1,n}return o(t,e),t.prototype.flush=function(){for(var e,t,r=this.actions,n=this.maxFrames;(t=r[0])&&t.delay<=n&&(r.shift(),this.frame=t.delay,!(e=t.execute(t.state,t.delay))););if(e){for(;t=r.shift();)t.unsubscribe();throw e}},t.frameTimeFactor=10,t}(r(3643).AsyncScheduler);t.VirtualTimeScheduler=a;var c=function(e){function t(t,r,n){void 0===n&&(n=t.index+=1);var o=e.call(this,t,r)||this;return o.scheduler=t,o.work=r,o.index=n,o.active=!0,o.index=t.index=n,o}return o(t,e),t.prototype.schedule=function(r,n){if(void 0===n&&(n=0),Number.isFinite(n)){if(!this.id)return e.prototype.schedule.call(this,r,n);this.active=!1;var o=new t(this.scheduler,this.work);return this.add(o),o.schedule(r,n)}return u.Subscription.EMPTY},t.prototype.requestAsyncId=function(e,r,n){void 0===n&&(n=0),this.delay=e.frame+n;var o=e.actions;return o.push(this),o.sort(t.sortActions),1},t.prototype.recycleAsyncId=function(e,t,r){void 0===r&&(r=0)},t.prototype._execute=function(t,r){if(!0===this.active)return e.prototype._execute.call(this,t,r)},t.sortActions=function(e,t){return e.delay===t.delay?e.index===t.index?0:e.index>t.index?1:-1:e.delay>t.delay?1:-1},t}(i.AsyncAction);t.VirtualAction=c},3660:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.animationFrame=t.animationFrameScheduler=void 0;var n=r(7574),o=r(2934);t.animationFrameScheduler=new o.AnimationFrameScheduler(n.AnimationFrameAction),t.animationFrame=t.animationFrameScheduler},505:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.animationFrameProvider=void 0;var i=r(3865);t.animationFrameProvider={schedule:function(e){var r=requestAnimationFrame,n=cancelAnimationFrame,o=t.animationFrameProvider.delegate;o&&(r=o.requestAnimationFrame,n=o.cancelAnimationFrame);var u=r((function(t){n=void 0,e(t)}));return new i.Subscription((function(){return null==n?void 0:n(u)}))},requestAnimationFrame:function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i=t.animationFrameProvider.delegate;return((null==i?void 0:i.requestAnimationFrame)||requestAnimationFrame).apply(void 0,o([],n(e)))},cancelAnimationFrame:function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i=t.animationFrameProvider.delegate;return((null==i?void 0:i.cancelAnimationFrame)||cancelAnimationFrame).apply(void 0,o([],n(e)))},delegate:void 0}},580:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.asap=t.asapScheduler=void 0;var n=r(2189),o=r(5523);t.asapScheduler=new o.AsapScheduler(n.AsapAction),t.asap=t.asapScheduler},2445:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.async=t.asyncScheduler=void 0;var n=r(9702),o=r(3643);t.asyncScheduler=new o.AsyncScheduler(n.AsyncAction),t.async=t.asyncScheduler},7950:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dateTimestampProvider=void 0,t.dateTimestampProvider={now:function(){return(t.dateTimestampProvider.delegate||Date).now()},delegate:void 0}},8908:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.immediateProvider=void 0;var i=r(7629),u=i.Immediate.setImmediate,a=i.Immediate.clearImmediate;t.immediateProvider={setImmediate:function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i=t.immediateProvider.delegate;return((null==i?void 0:i.setImmediate)||u).apply(void 0,o([],n(e)))},clearImmediate:function(e){var r=t.immediateProvider.delegate;return((null==r?void 0:r.clearImmediate)||a)(e)},delegate:void 0}},8203:function(e,t){var r=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},n=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.intervalProvider=void 0,t.intervalProvider={setInterval:function(e,o){for(var i=[],u=2;u<arguments.length;u++)i[u-2]=arguments[u];var a=t.intervalProvider.delegate;return(null==a?void 0:a.setInterval)?a.setInterval.apply(a,n([e,o],r(i))):setInterval.apply(void 0,n([e,o],r(i)))},clearInterval:function(e){var r=t.intervalProvider.delegate;return((null==r?void 0:r.clearInterval)||clearInterval)(e)},delegate:void 0}},6813:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.performanceTimestampProvider=void 0,t.performanceTimestampProvider={now:function(){return(t.performanceTimestampProvider.delegate||performance).now()},delegate:void 0}},8615:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.queue=t.queueScheduler=void 0;var n=r(6201),o=r(5860);t.queueScheduler=new o.QueueScheduler(n.QueueAction),t.queue=t.queueScheduler},4590:function(e,t){var r=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},n=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.timeoutProvider=void 0,t.timeoutProvider={setTimeout:function(e,o){for(var i=[],u=2;u<arguments.length;u++)i[u-2]=arguments[u];var a=t.timeoutProvider.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,n([e,o],r(i))):setTimeout.apply(void 0,n([e,o],r(i)))},clearTimeout:function(e){var r=t.timeoutProvider.delegate;return((null==r?void 0:r.clearTimeout)||clearTimeout)(e)},delegate:void 0}},3725:(e,t)=>{function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}Object.defineProperty(t,"__esModule",{value:!0}),t.iterator=t.getSymbolIterator=void 0,t.getSymbolIterator=r,t.iterator=r()},2801:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observable=void 0,t.observable="function"==typeof Symbol&&Symbol.observable||"@@observable"},8433:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},2351:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ArgumentOutOfRangeError=void 0;var n=r(7029);t.ArgumentOutOfRangeError=n.createErrorClass((function(e){return function(){e(this),this.name="ArgumentOutOfRangeError",this.message="argument out of range"}}))},9474:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EmptyError=void 0;var n=r(7029);t.EmptyError=n.createErrorClass((function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}}))},7629:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TestTools=t.Immediate=void 0;var r,n=1,o={};function i(e){return e in o&&(delete o[e],!0)}t.Immediate={setImmediate:function(e){var t=n++;return o[t]=!0,r||(r=Promise.resolve()),r.then((function(){return i(t)&&e()})),t},clearImmediate:function(e){i(e)}},t.TestTools={pending:function(){return Object.keys(o).length}}},8598:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NotFoundError=void 0;var n=r(7029);t.NotFoundError=n.createErrorClass((function(e){return function(t){e(this),this.name="NotFoundError",this.message=t}}))},2642:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectUnsubscribedError=void 0;var n=r(7029);t.ObjectUnsubscribedError=n.createErrorClass((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}))},6156:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SequenceError=void 0;var n=r(7029);t.SequenceError=n.createErrorClass((function(e){return function(t){e(this),this.name="SequenceError",this.message=t}}))},4805:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnsubscriptionError=void 0;var n=r(7029);t.UnsubscriptionError=n.createErrorClass((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}))},2433:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.popNumber=t.popScheduler=t.popResultSelector=void 0;var n=r(3005),o=r(9016);function i(e){return e[e.length-1]}t.popResultSelector=function(e){return n.isFunction(i(e))?e.pop():void 0},t.popScheduler=function(e){return o.isScheduler(i(e))?e.pop():void 0},t.popNumber=function(e,t){return"number"==typeof i(e)?e.pop():t}},1203:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.argsArgArrayOrObject=void 0;var r=Array.isArray,n=Object.getPrototypeOf,o=Object.prototype,i=Object.keys;t.argsArgArrayOrObject=function(e){if(1===e.length){var t=e[0];if(r(t))return{args:t,keys:null};if((a=t)&&"object"==typeof a&&n(a)===o){var u=i(t);return{args:u.map((function(e){return t[e]})),keys:u}}}var a;return{args:e,keys:null}}},5498:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.argsOrArgArray=void 0;var r=Array.isArray;t.argsOrArgArray=function(e){return 1===e.length&&r(e[0])?e[0]:e}},6967:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.arrRemove=void 0,t.arrRemove=function(e,t){if(e){var r=e.indexOf(t);0<=r&&e.splice(r,1)}}},7029:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createErrorClass=void 0,t.createErrorClass=function(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}},641:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createObject=void 0,t.createObject=function(e,t){return e.reduce((function(e,r,n){return e[r]=t[n],e}),{})}},6110:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.captureError=t.errorContext=void 0;var n=r(3280),o=null;t.errorContext=function(e){if(n.config.useDeprecatedSynchronousErrorHandling){var t=!o;if(t&&(o={errorThrown:!1,error:null}),e(),t){var r=o,i=r.errorThrown,u=r.error;if(o=null,i)throw u}}else e()},t.captureError=function(e){n.config.useDeprecatedSynchronousErrorHandling&&o&&(o.errorThrown=!0,o.error=e)}},7738:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.executeSchedule=void 0,t.executeSchedule=function(e,t,r,n,o){void 0===n&&(n=0),void 0===o&&(o=!1);var i=t.schedule((function(){r(),o?e.add(this.schedule(null,n)):this.unsubscribe()}),n);if(e.add(i),!o)return i}},4781:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.identity=void 0,t.identity=function(e){return e}},3909:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isArrayLike=void 0,t.isArrayLike=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e}},9595:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isAsyncIterable=void 0;var n=r(3005);t.isAsyncIterable=function(e){return Symbol.asyncIterator&&n.isFunction(null==e?void 0:e[Symbol.asyncIterator])}},1677:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isValidDate=void 0,t.isValidDate=function(e){return e instanceof Date&&!isNaN(e)}},3005:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isFunction=void 0,t.isFunction=function(e){return"function"==typeof e}},9500:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isInteropObservable=void 0;var n=r(2801),o=r(3005);t.isInteropObservable=function(e){return o.isFunction(e[n.observable])}},2743:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isIterable=void 0;var n=r(3725),o=r(3005);t.isIterable=function(e){return o.isFunction(null==e?void 0:e[n.iterator])}},8386:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isObservable=void 0;var n=r(2419),o=r(3005);t.isObservable=function(e){return!!e&&(e instanceof n.Observable||o.isFunction(e.lift)&&o.isFunction(e.subscribe))}},6018:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isPromise=void 0;var n=r(3005);t.isPromise=function(e){return n.isFunction(null==e?void 0:e.then)}},7823:function(e,t,r){var n=this&&this.__generator||function(e,t){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;u;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,n=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},o=this&&this.__await||function(e){return this instanceof o?(this.v=e,this):new o(e)},i=this&&this.__asyncGenerator||function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),u=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){i[e]&&(n[e]=function(t){return new Promise((function(r,n){u.push([e,t,r,n])>1||c(e,t)}))})}function c(e,t){try{(r=i[e](t)).value instanceof o?Promise.resolve(r.value.v).then(l,s):f(u[0][2],r)}catch(e){f(u[0][3],e)}var r}function l(e){c("next",e)}function s(e){c("throw",e)}function f(e,t){e(t),u.shift(),u.length&&c(u[0][0],u[0][1])}};Object.defineProperty(t,"__esModule",{value:!0}),t.isReadableStreamLike=t.readableStreamLikeToAsyncGenerator=void 0;var u=r(3005);t.readableStreamLikeToAsyncGenerator=function(e){return i(this,arguments,(function(){var t,r,i;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,o(t.read())];case 3:return r=n.sent(),i=r.value,r.done?[4,o(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,o(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))},t.isReadableStreamLike=function(e){return u.isFunction(null==e?void 0:e.getReader)}},9016:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isScheduler=void 0;var n=r(3005);t.isScheduler=function(e){return e&&n.isFunction(e.schedule)}},4935:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.operate=t.hasLift=void 0;var n=r(3005);function o(e){return n.isFunction(null==e?void 0:e.lift)}t.hasLift=o,t.operate=function(e){return function(t){if(o(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}},1914:function(e,t,r){var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u},o=this&&this.__spreadArray||function(e,t){for(var r=0,n=t.length,o=e.length;r<n;r++,o++)e[o]=t[r];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.mapOneOrManyArgs=void 0;var i=r(7291),u=Array.isArray;t.mapOneOrManyArgs=function(e){return i.map((function(t){return function(e,t){return u(t)?e.apply(void 0,o([],n(t))):e(t)}(e,t)}))}},2576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.noop=void 0,t.noop=function(){}},8634:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.not=void 0,t.not=function(e,t){return function(r,n){return!e.call(t,r,n)}}},9985:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pipeFromArray=t.pipe=void 0;var n=r(4781);function o(e){return 0===e.length?n.identity:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}t.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o(e)},t.pipeFromArray=o},7968:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.reportUnhandledError=void 0;var n=r(3280),o=r(4590);t.reportUnhandledError=function(e){o.timeoutProvider.setTimeout((function(){var t=n.config.onUnhandledError;if(!t)throw e;t(e)}))}},9906:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createInvalidObservableTypeError=void 0,t.createInvalidObservableTypeError=function(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}},8492:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(3607),t)},4541:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Animation=void 0;var n=r(666),o=function(){function e(e,t,r,o,i,u){this.isFinished=!1,this.type=e,this.animationStartTime=n.AnimationsManager.getCurrentTimeStamp(),this.msDuration=t,this.startValues=r,this.endValues=o,this.setValCallback=i,this.easeType=u}return e.prototype.updateAnimationPositions=function(){var e=this,t=n.AnimationsManager.getCurrentTimeStamp();if(t-this.animationStartTime<=this.msDuration){var r=this.getTimeProgress(t),o=this.getEaseFunction(r),i=this.startValues.map((function(t,r){return t+(e.endValues[r]-t)*o}));this.setValCallback(i,this)}else this.isFinished=!0},e.prototype.getEaseFunction=function(e){return this.easeType?this.easeInOutSine(e):this.easeInOutQuint(e)},e.prototype.getTimeProgress=function(e){return(e-this.animationStartTime)/this.msDuration},e.prototype.easeInOutQuint=function(e){return 1===e?1:1-Math.pow(2,-10*e)},e.prototype.easeInOutSine=function(e){return e<.5?(1-Math.sqrt(1-Math.pow(2*e,2)))/2:(Math.sqrt(1-Math.pow(-2*e+2,2))+1)/2},e.prototype.setStartValues=function(e){this.startValues=e},e.prototype.setEndValues=function(e){this.endValues=e},e.prototype.getValues=function(){return{startValues:this.startValues,endValues:this.endValues}},e}();t.Animation=o},666:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AnimationsManager=void 0;var n=r(4541),o=function(){function e(){}return e.setCurrentTimeStamp=function(e){this.currentTimeStamp=e},e.getCurrentTimeStamp=function(){return this.currentTimeStamp},e.getAnimationStack=function(){return this.animationStack},e.startAnimation=function(e,t,r,o,i,u){this.checkDuplicates(e),this.animationStack.push(new n.Animation(e,t,r,o,i,u))},e.checkDuplicates=function(e){this.animationStack.filter((function(t){return t.type===e}))},e.update=function(){var t=this;e.updateStack(),this.animationStack.forEach((function(e){t.currentRenderBlock||e.updateAnimationPositions()})),this.currentRenderBlock=!1},e.updateStack=function(){this.animationStack=this.animationStack.filter((function(e){return!e.isFinished}))},e.clearStack=function(){this.animationStack=[]},e.setBlock=function(){this.currentRenderBlock=!0},e.currentRenderBlock=!1,e.animationStack=[],e}();t.AnimationsManager=o},1528:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ChartAPIController=void 0;var n=r(666),o=function(){function e(e,t){this.view=e,this.eventManager=t}return e.prototype.resetViewOffset=function(e){var t=this;void 0===e&&(e=400),n.AnimationsManager.startAnimation("resetViewOffset",e,[this.view.getViewOffset()],[0],(function(e){var r=e[0];t.view.setViewOffset(r)}),!0)},e.prototype.hoveredCandle$=function(){return this.eventManager.getCandleHover$()},e}();t.ChartAPIController=o},9699:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ChartManager=void 0;var n=r(2755),o=r(3253),i=r(7244),u=r(9523),a=r(9102),c=r(3371),l=r(8683),s=r(5493),f=r(85),d=r(2733),v=r(216),p=r(666),b=r(1528),h=function(){function e(e,t,r){this.context=e,this.canvas=t,this.setCanvasDimensions(),this.setView(),this.setRenderer(),this.setCandles(r),this.canvas.style.backgroundColor="#191f2c",this.elementCollector=new n.ElementCollector(this.dimensions,this.view,this.candles),this.addCanvasListeners(),this.requestNextFrame(0),this.apiController=new b.ChartAPIController(this.view,this.eventManager)}return e.prototype.createApiController=function(){return this.apiController},e.prototype.setCanvasDimensions=function(){var e=[75,40],t=e[0],r=e[1];this.dimensions=new o.Dimensions(this.canvas,t,r)},e.prototype.setView=function(){this.view=new i.View({intervalName:"M1",intervalCandles:60,intervalStep:0,intervalColInit:150,intervalColRatios:[150,300,600,1200],intervalSubColRatios:[10,5,1,1],viewOffset:0})},e.prototype.setRenderer=function(){this.renderer=new a.Renderer(this.context,this.dimensions)},e.prototype.setCandles=function(e){u.Candle.findMaxLowInData(e),this.candles=e},e.prototype.addCanvasListeners=function(){this.eventManager=new c.EventManager(this.canvas),this.eventManager.listen(new l.Wheel(this.canvas,this.dimensions,this.view)),this.eventManager.listen(new s.Mouseout),this.eventManager.listen(new f.Mousedown),this.eventManager.listen(new d.Mouseup),this.eventManager.listen(new v.Mousemove(this.view,this.elementCollector,this.eventManager))},e.prototype.requestNextFrame=function(e){if(e&&p.AnimationsManager.setCurrentTimeStamp(e),!this.lastRender||e&&e-this.lastRender>=16){this.lastRender=null!=e?e:0,u.Candle.resetHighLow(),this.elementCollector.resetElements(),this.elementCollector.setElements();var t=this.getRenderingElements();this.renderElements(t)}window.requestAnimationFrame(this.requestNextFrame.bind(this))},e.prototype.getRenderingElements=function(){return this.elementCollector.getElements()},e.prototype.renderElements=function(e){p.AnimationsManager.update(),this.renderer.draw(e)},e}();t.ChartManager=h},8450:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Chart=void 0;var n=r(9699),o=function(){function e(e){var t=this;this.fetchCandles("http://localhost:3000/candles").then((function(e){return e.json()})).then((function(r){return t.initChart(r,e)})).catch((function(){return t.initChart([],e)}))}return e.prototype.initChart=function(e,t){this.canvas=t,this.context=this.getRenderingContext(),this.context&&(this.chartManager=new n.ChartManager(this.context,this.canvas,e.reverse()))},e.prototype.getRenderingContext=function(){if(window.HTMLCanvasElement)return this.canvas.getContext("2d");throw new Error("Canvas is not supported")},e.prototype.fetchCandles=function(e){return fetch(e)},e.prototype.getApiController=function(){return this.chartManager.createApiController()},e}();t.Chart=o},3253:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Dimensions=void 0;var r=function(){function e(e,t,r){this.dimensions={},this.canvas=e,this.horizontalMargin=t,this.verticalMargin=r,this.setDimensions()}return e.prototype.getWidth=function(){var e;return null!==(e=this.dimensions.width)&&void 0!==e?e:0},e.prototype.getHeight=function(){var e;return null!==(e=this.dimensions.height)&&void 0!==e?e:0},e.prototype.getDimensions=function(){return this.dimensions},e.prototype.getVerticalMargin=function(){return this.verticalMargin},e.prototype.getHorizontalMargin=function(){return this.horizontalMargin},e.prototype.setDimensions=function(){this.setCanvasStyleWidthAndHeight(),this.setCanvasWidthAndHeight(),this.dimensions.height=this.canvas.offsetHeight,this.dimensions.width=this.canvas.offsetWidth},e.prototype.setCanvasStyleWidthAndHeight=function(e,t){void 0===e&&(e=1280),void 0===t&&(t=400),this.canvas.style.width="".concat(e,"px"),this.canvas.style.height="".concat(t,"px")},e.prototype.setCanvasWidthAndHeight=function(){this.canvas.height=this.canvas.offsetHeight,this.canvas.width=this.canvas.offsetWidth},e}();t.Dimensions=r},9523:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Candle=void 0;var i=r(5831),u=r(5213),a=function(e){function t(r,n,o){var i=e.call(this,r,n)||this;return i.setCurrentHighLow(o),t.initializeRenderer(),i.setColor(o),i.width=n.width,i.yEnd=o.open,i.yStart=o.close,i.yHigh=o.high,i.yLow=o.low,i.time=o.time,i}return o(t,e),t.prototype.render=function(e,r,n){t.renderer.draw(e,n,r)},t.prototype.getCandleTime=function(){return this.time},t.prototype.setColor=function(e){this.color=e.open>e.close?"#eb4e5c":"#56b786"},t.prototype.getColor=function(){return this.color},t.prototype.setCurrentHighLow=function(e){(!t.currentMaxHigh||e.high>t.currentMaxHigh)&&(t.currentMaxHigh=e.high),(!t.currentMaxLow||e.low<t.currentMaxLow)&&(t.currentMaxLow=e.low)},t.findMaxLowInData=function(e){var t=this;e.forEach((function(e){(!t.maxHigh||e.high>t.maxHigh)&&(t.maxHigh=e.high),(!t.maxLow||e.low<t.maxLow)&&(t.maxLow=e.low)}))},t.getMaxLowInData=function(){return[this.maxHigh,this.maxLow]},t.resetHighLow=function(){t.currentMaxHigh=void 0,t.currentMaxLow=void 0},t.getHighLow=function(){var e,r;return[null!==(e=t.currentMaxHigh)&&void 0!==e?e:0,null!==(r=t.currentMaxLow)&&void 0!==r?r:0]},t.getHigh=function(){if(void 0===t.currentMaxHigh)throw new Error("Could not establish currentMaxHigh for a candle");return t.currentMaxHigh},t.getLow=function(){if(void 0===t.currentMaxLow)throw new Error("Could not establish currentMaxLow for a candle");return t.currentMaxLow},t.initializeRenderer=function(){t.renderer||(t.renderer=new u.CandleRenderer)},t}(i.Element);t.Candle=a},2755:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ElementCollector=void 0;var n=r(9523),o=r(6885),i=r(846),u=r(2752),a=function(){function e(e,t,r){this.renderingElementsSet=new Set,this.candles=[],this.mainColumnLines=[],this.subColumnLines=[],this.text=[],this.horizontalLines=[],this.dimensions=e,this.view=t,this.candleData=r}return e.prototype.getElements=function(){return this.renderingElementsSet},e.prototype.resetElements=function(){this.renderingElementsSet=new Set,this.candles=[],this.mainColumnLines=[],this.subColumnLines=[],this.text=[],this.horizontalLines=[]},e.prototype.getCandles=function(){return this.candles},e.prototype.setElements=function(){for(var e=this.dimensions.getWidth(),t=0,r=e;r+this.view.getViewOffset()>0;r-=this.view.getColInterval()){var n=r+this.view.getViewOffset()-this.dimensions.getHorizontalMargin();t++,n>0&&n<e+2*this.view.getColInterval()&&(this.addCandlesInInterval(n,this.candleData,t,e),this.addTimeStamps(n,t,this.candleData))}this.addHorizontalLines(),this.renderingElementsSet.add(this.text),this.renderingElementsSet.add(this.subColumnLines),this.renderingElementsSet.add(this.mainColumnLines),this.renderingElementsSet.add(this.horizontalLines),this.renderingElementsSet.add(this.candles)},e.prototype.addCandlesInInterval=function(e,t,r,n){for(var o=this.getIntervalCandleDistance(),i=this.view.getIntervalCandles(),u=0;u<i;u++){var a=t[u+i*(r-1)];this.addCandleIfInView(e,u,o,n,a)}},e.prototype.getIntervalCandleDistance=function(){return this.view.getColInterval()/this.view.getIntervalCandles()},e.prototype.addCandleIfInView=function(e,t,r,i,u){if(e-t*r>0&&e-t*r<i-this.dimensions.getHorizontalMargin()+10){var a=e-t*r;this.candles.push(new n.Candle({xStart:a},{width:this.view.getColInterval()/100},u));var c=this.view.getDivider(),l=this.view.getIntervalCandles()/c;t%this.view.getSubColRatio()==0&&this.subColumnLines.push(new o.Line({xStart:a,xEnd:a,yStart:0,yEnd:this.dimensions.getHeight()-this.dimensions.getVerticalMargin()},{width:.1})),t%l==0&&this.mainColumnLines.push(new o.Line({xStart:a,xEnd:a,yStart:0,yEnd:this.dimensions.getHeight()-this.dimensions.getVerticalMargin()},{width:.3}))}},e.prototype.addTimeStamps=function(e,t,r){var n=this.dimensions.getHeight()-this.dimensions.getVerticalMargin()+23,o=new Date(Date.parse(r[0].time));o.setMinutes(o.getMinutes()-this.view.getIntervalCandles()*(t-1)),this.text.push(new i.Text({xStart:e-10,yStart:n},{},"".concat(o.getHours(),":").concat(o.getMinutes())));for(var u=this.view.getColInterval()/this.view.getIntervalCandles(),a=e,c=0;c<this.view.getIntervalCandles();c++){var l=e-10-(u+u*c);if(!a||a-l>40&&e-l<this.view.getColInterval()-10){var s=new Date(Date.parse(r[0].time));s.setMinutes(s.getMinutes()-this.view.getIntervalCandles()*(t-1)-c-1),this.text.push(new i.Text({xStart:l,yStart:n},{},"".concat(s.getHours(),":").concat(s.getMinutes()))),a=l}}},e.prototype.addHorizontalLines=function(){for(var e=this.dimensions.getDimensions().height,t=n.Candle.getHighLow(),r=t[0],a=t[1],c=1;(Math.floor(r)-Math.floor(a))/c>=10;)c*=2;for(;(Math.floor(r)-Math.floor(a))/c<=6;)c/=2;for(var l=Math.floor(r);l>=a;l-=.5)if(l<=r&&l>=a&&Number(l.toFixed(2))%c==0){var s=u.MathUtils.interpolate((null!=e?e:0)-this.dimensions.getVerticalMargin(),l,a,r),f=this.dimensions.getWidth()-60;this.horizontalLines.push(new o.Line({xStart:0,xEnd:f,yStart:s,yEnd:s},{width:.1})),this.text.push(new i.Text({xStart:this.dimensions.getWidth()-50,yStart:s+6},{},"".concat(l.toFixed(2))))}},e}();t.ElementCollector=a},5831:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Element=void 0;var r=function(){function e(e,t){var r,n,o=e.xStart,i=e.xEnd,u=e.yStart,a=e.yEnd;this.xStart=null!=o?o:0,this.xEnd=null!==(r=null!=i?i:o)&&void 0!==r?r:0,this.yStart=null!=u?u:0,this.yEnd=null!==(n=null!=a?a:u)&&void 0!==n?n:0,this.renderProperties=t}return e.prototype.getXStart=function(){return this.xStart},e.prototype.getXEnd=function(){return this.xEnd},e.prototype.getYStart=function(){return this.yStart},e.prototype.getYEnd=function(){return this.yEnd},e.prototype.getProperties=function(){return this.renderProperties},e.prototype.render=function(e,t,r){},e}();t.Element=r},6885:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Line=void 0;var i=r(5831),u=r(4121),a=function(e){function t(r,n){var o=e.call(this,r,n)||this;return t.initializeRenderer(),o}return o(t,e),t.prototype.render=function(e,r,n){t.renderer.draw(e,n,r,this.getProperties())},t.initializeRenderer=function(){t.renderer||(t.renderer=new u.LineRenderer)},t}(i.Element);t.Line=a},846:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.Text=void 0;var i=r(2309),u=function(e){function t(r,n,o){var i=e.call(this,r,n)||this;return i.value=o,t.initializeRenderer(),i}return o(t,e),t.prototype.render=function(e,r,n){t.renderer.draw(e,n,r,this.getProperties())},t.prototype.getValue=function(){return this.value},t.initializeRenderer=function(){t.renderer||(t.renderer=new i.TextRenderer)},t}(r(5831).Element);t.Text=u},3371:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EventManager=void 0;var n=r(2872),o=function(){function e(e){this.candleHover$=new n.Subject,this.canvas=e}return e.prototype.listen=function(e){this.canvas.addEventListener(e.eventName,(function(t){e.callback(t)}))},e.prototype.getCandleHover$=function(){return this.candleHover$.asObservable()},e.mouseDown=!1,e}();t.EventManager=o},85:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Mousedown=void 0;var n=r(3371),o=function(){function e(){this.eventName="mousedown"}return e.prototype.callback=function(e){n.EventManager.mouseDown=!0},e}();t.Mousedown=o},216:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Mousemove=void 0;var n=r(3371),o=function(){function e(e,t,r){this.eventName="mousemove",this.view=e,this.elementCollector=t,this.eventManager=r}return e.prototype.callback=function(e){this.checkCandleHover(e),this.view.getViewOffset()+e.movementX>0&&n.EventManager.mouseDown&&this.view.setViewOffset(this.view.getViewOffset()+e.movementX)},e.prototype.checkCandleHover=function(e){var t=this;this.elementCollector.getCandles().forEach((function(r){e.offsetX>r.getXStart()&&e.offsetX<r.getXStart()+r.width&&t.eventManager.candleHover$.next(r)}))},e}();t.Mousemove=o},5493:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Mouseout=void 0;var n=r(3371),o=function(){function e(){this.eventName="mouseout"}return e.prototype.callback=function(e){n.EventManager.mouseDown=!1},e}();t.Mouseout=o},2733:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Mouseup=void 0;var n=r(3371),o=function(){function e(){this.eventName="mouseup"}return e.prototype.callback=function(e){n.EventManager.mouseDown=!1},e}();t.Mouseup=o},8683:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Wheel=void 0;var n=r(666),o=function(){function e(e,t,r){this.eventName="wheel",this.canvas=e,this.dimensions=t,this.view=r}return e.prototype.callback=function(t){var r=this,o=(t.deltaY>0&&0!==t.deltaY?1:-1)/2*this.view.getDivider(),i={offsetX:t.offsetX,deltaY:o};n.AnimationsManager.startAnimation("wheel",400,[0],[i.deltaY],(function(t){if(!(-i.deltaY&&r.view.maxZoomIn(-i.deltaY)||-i.deltaY&&r.view.maxZoomOut(-i.deltaY))){var n=t[0];e.calculate(r.canvas,r.dimensions,r.view,i,-n)}}),!1)},e.calculate=function(e,t,r,n,o){var i=t.getWidth(),u=o,a=this.calculateOffsetSync(i,t,n,u,r);0!==a&&(this.executeZoom(u,a,r),this.updateOffsetOverflow(r))},e.calculateOffsetSync=function(e,t,r,n,o){return(e+o.getViewOffset()-t.getHorizontalMargin()-r.offsetX)/o.getColInterval()*n},e.executeZoom=function(e,t,r){r.addColInterval(e),r.addViewOffset(t)},e.updateOffsetOverflow=function(e){e.getViewOffset()<=0&&e.setViewOffset(0)},e}();t.Wheel=o},2752:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MathUtils=void 0;var r=function(){function e(){}return e.interpolate=function(e,t,r,n){var o=e*(t-r)/(n-r);return o>e/2?e/2-Math.abs(o-e/2):o<e/2?e/2+Math.abs(o-e/2):o},e}();t.MathUtils=r},5213:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CandleRenderer=void 0;var n=r(9523),o=r(2752),i=function(){function e(){}return e.prototype.draw=function(e,t,r){var i,u,a=n.Candle.getHighLow(),c=a[0],l=a[1],s=t.getHeight()-t.getVerticalMargin();if(e.getXStart()<=t.getWidth()-t.getHorizontalMargin()+10){var f=o.MathUtils.interpolate(s,e.yHigh,l,c),d=o.MathUtils.interpolate(s,e.yLow,l,c);r.beginPath(),r.moveTo(e.getXStart(),d),r.lineTo(e.getXStart(),f),r.strokeStyle=e.getColor(),r.lineWidth=1,r.stroke();var v=o.MathUtils.interpolate(s,e.getYStart(),l,c),p=o.MathUtils.interpolate(s,e.getYEnd(),l,c);r.beginPath(),r.roundRect(e.getXStart()-1*(null!==(i=e.width)&&void 0!==i?i:0)/2,p,1*(null!==(u=e.width)&&void 0!==u?u:0),v-p,1),r.fillStyle=e.getColor(),r.stroke(),r.fill()}},e}();t.CandleRenderer=i},4121:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LineRenderer=void 0;var r=function(){function e(){}return e.prototype.draw=function(e,t,r,n){var o;r.beginPath(),r.moveTo(e.getXStart(),e.getYStart()),r.lineTo(e.getXEnd(),e.getYEnd()),r.strokeStyle="#A9A9A9",r.lineWidth=null!==(o=n.width)&&void 0!==o?o:1,r.stroke()},e}();t.LineRenderer=r},9102:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Renderer=void 0;var r=function(){function e(e,t){this.context=e,this.dimensions=t}return e.prototype.draw=function(e){var t=this;this.clearView(),e.forEach((function(e){e.forEach((function(e){t.render(e)}))}))},e.prototype.clearView=function(){this.context.clearRect(0,0,this.dimensions.getWidth(),this.dimensions.getHeight())},e.prototype.render=function(e){e.getXStart()<=this.dimensions.getWidth()&&e.render(e,this.context,this.dimensions)},e}();t.Renderer=r},2309:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TextRenderer=void 0;var r=function(){function e(){}return e.prototype.draw=function(e,t,r,n){r.font="9px Barlow",r.fillStyle="#A9A9A9",r.fillText(e.getValue(),e.getXStart(),e.getYStart())},e}();t.TextRenderer=r},7244:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.View=void 0;var r=function(){function e(e){var t=e.intervalColInit,r=e.intervalColRatios,n=e.viewOffset,o=e.intervalStep,i=e.intervalCandles,u=e.intervalSubColRatios;this.colInterval=t,this.viewOffset=n,this.colIntervalRatios=r,this.intervalStep=o,this.intervalCandles=i,this.subColIntervalRatios=u}return e.prototype.getIntervalCandles=function(){return this.intervalCandles},e.prototype.getDivider=function(){return Math.pow(2,this.intervalStep)},e.prototype.getSubColRatio=function(){return this.subColIntervalRatios[this.intervalStep]},e.prototype.addColInterval=function(e){this.maxZoomOut(e)?this.colInterval=this.getMinColInterval():this.maxZoomIn(e)?this.colInterval=this.getMaxColInterval():(this.colInterval+=e,this.updateIntervalStep())},e.prototype.getMinColInterval=function(){return this.colIntervalRatios[0]},e.prototype.getIntervalStep=function(){return this.intervalStep},e.prototype.getMaxColInterval=function(){return this.colIntervalRatios[this.colIntervalRatios.length-1]},e.prototype.maxZoomOut=function(e){return void 0===e&&(e=0),this.colInterval+e<=this.getMinColInterval()&&e<=0},e.prototype.maxZoomIn=function(e){return void 0===e&&(e=0),this.colInterval+e>=this.getMaxColInterval()&&e>=0},e.prototype.updateIntervalStep=function(){this.checkIfNextStep(),this.checkIfPrevStep()},e.prototype.checkIfNextStep=function(){this.intervalStep!==this.colIntervalRatios.length-1&&this.colInterval>=this.colIntervalRatios[this.intervalStep+1]&&this.intervalStep++},e.prototype.checkIfPrevStep=function(){0!==this.intervalStep&&this.colInterval<this.colIntervalRatios[this.intervalStep]&&this.intervalStep--},e.prototype.getColInterval=function(){return this.colInterval},e.prototype.getViewOffset=function(){return this.viewOffset},e.prototype.setViewOffset=function(e){this.viewOffset=e},e.prototype.addViewOffset=function(e){this.colInterval!==this.getMinColInterval()&&this.colInterval!==this.getMaxColInterval()&&(this.viewOffset+=e)},e}();t.View=r},3607:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0});var i=r(8450);o(r(8450),t),o(r(1528),t);var u=document.getElementById("chart");new i.Chart(u)}},t={};!function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}(8492)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,